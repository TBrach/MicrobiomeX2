# - install packages -
# NB: all packages have to be installed, usually via install.packages()
# some packages you need to install via bioconductor, e.g.:
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
# --
# - load packages -
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
library(RColorBrewer)
library(pheatmap)
library(grid)
library(breakaway)
library(bookdown)
# library(coin) # only needed if using test_differential_abundance_WilcoxonsingleManiCoin
# - packaged from Mani's analysis that I could add if needed-
# library(cowplot)
# library(ade4)
# library(ggrepel)
# library(ggforce)
# library(kableExtra)
# library(bindrcpp)
# library(stringr)
# library(BiocParallel)
# library(microbiomeX)
# --
# - source all functions -
functionpath <- "./Functions"
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_010_explore_ps_functions.R"))
source(file.path(functionpath, "_n_020_alpha_diversity_functions.R"))
source(file.path(functionpath, "_n_030_preprocess_filtering_functions.R"))
source(file.path(functionpath, "_n_040_beta_diversity_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
source(file.path(functionpath, "_n_060_phylum_analysis_functions.R"))
# - load your phyloseq object -
# NB: USER INPUTPS
name_phyloseq_rds <- "physeq_microdiab_ngt_Men.rds"
# NB: USER INPUT
datapath <- "./Example_phyloseq_objects"
# Test your input:
if(! file.exists(file.path(datapath, name_phyloseq_rds))){
stop("The given path/file to your phyloseq object does not exist.")
}
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
# - Define the group variable for sample comparisons -
# NB: USER INPUT
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
# Test your input:
if(! group_var %in% colnames(sample_data(ps))) {
stop("The given group_var is not a variable in the sample data of the loaded phyloseq object.")
}
# - Define the two levels in your group_var that you want to compare -
# NB: USER INPUT
group_var_levels <- c("IN", "DK") # defines the order of the groups in all plots. If set to NULL:
if (is.null(group_var_levels)) {
group_var_levels <- unique(sample_data(ps)[[group_var]])
}
# Test your input:
if (!all(group_var_levels %in% unique(sample_data(ps)[[group_var]]))) {
stop("Not all given group_var_levels are actually levels in group_var column.")
}
if (length(group_var_levels) != 2) {
stop("Sorry, for MicrobiomeX2 group_var_levels needs to consist of exactly 2 levels.")
}
# make sure sample_data(ps) is a factor (not totally necessary but in case there is no ordering in one of the functions)
sample_data(ps)[[group_var]] <- factor(sample_data(ps)[[group_var]], levels = c(group_var_levels, setdiff(unique(sample_data(ps)[[group_var]]), group_var_levels)), ordered = TRUE)
# - Set the colors representing the groups in your group_var_levels -
# NB: so also color_levels must consist of exactly two colors
# NB: USER INPUT
color_levels <- c(cbPalette[2], cbPalette[4]) # choose your preferred colors for each group in your group_var. If set to NULL:
if (is.null(color_levels)) {
color_levels <- c(cbPalette[2], cbPalette[4])
}
# Test your input:
if (length(color_levels) != length(group_var_levels)) {
stop("The number of colors in the given color_levels did not fit to group_var_levels.")
}
if (!all(areColors(color_levels))) {
stop("Stopped because not all entries in color_levels were valid R colors.")
}
names(color_levels) <- group_var_levels
# - optional: use another variable in sample_data(ps) as shape in some of the plots -
# NB: user input
shape <- "Gender"
# Test your input:
if (!is.null(shape)) {
if (! shape %in% colnames(sample_data(ps))) {
stop("The given shape is not a variable in the sample data of the loaded phyloseq object.")
}
}
# - Set the taxonomic_level for the analysis -
# NB: You can choose all levels within colnames(tax_table(ps))
# phyloseq::taxglom will be used to adjust the phyloseq object to the chosen taxonomic_level.
# if you set taxonomic_level to NULL, all taxa will be analysed (i.e. strain/species/ASV level analysis)
# NB user input
taxonomic_level <- "Species"
# NB user input
phylum_NA_removal <- "no" # if yes you remove all taxa for which Phylum = NA before the analyses
# Test your input:
if (!is.null(taxonomic_level) && !(taxonomic_level %in% colnames(tax_table(ps)))){
stop("You provided a taxonomic_level that is not present in the tax_table of the loaded phyloseq object.")
}
# - Filtering inputs -
# NB: user input
prevalence <- 5 # in percent, for prevalence filtering of taxa
# NB: user input
min_obs <- 0L # in counts, a taxon will be considered present (for prevalence) if count > min_obs
# NB: user input
taxa_sums_quantile <- 100 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence filter
# Test filtering inputs and set invalid inputs to defaults
if (!is.numeric(prevalence) || prevalence < 0 || prevalence > 100) {
prevalence <- 0
}
if (!is.numeric(min_obs)) {
min_obs <- 0L
}
if (!is.numeric(taxa_sums_quantile) || taxa_sums_quantile < 0 || taxa_sums_quantile > 100) {
taxa_sums_quantile <- 100
}
# - Alpha diversity and rarifaction inputs -
# NB: user input
alpha_div_measures <- c("Observed", "Shannon") # ?phyloseq::estimate_richness: may include c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher")
# NB: user input
seed <- 1234 # for reproducibility of rarefaction curves
# NB: user input
step_size <- 200 # steps in sample_sums for rarefaction curves
# NB: user input
rare_level <- NULL # sample_sums/total_counts level to which rarefaction is perforemd, if NULL, min(sample_sums(ps)) is used!
# NB: user input
rare_max_total <- NULL # maximal sample_sums/total_counts value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# Test alpha-diversity inputs and set invalid inputs to defaults
if (! all(alpha_div_measures %in% c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher"))) {
alpha_div_measures <- c("Observed", "Shannon")
}
if (!is.numeric(seed)) {
seed <- 1234
}
if (!is.numeric(step_size)) {
step_size <- 200
}
if (!is.numeric(rare_level)) {
rare_level <- NULL # will be changed to min(sample_sums(ps))
}
if (!is.numeric(rare_max_total)) {
rare_max_total <- NULL # quantile(sample_sums(ps), probs = .25)
}
# - beta diversity inputs -
dist_methods <- c("bray", "jsd") # otions: see unlist(phyloseq::distanceMethodList)
coord_cor <- FALSE # adjustment of the axis representation in ordination plots
# Test beta diversity inputs and set invalid inputs to defaults
if (! all(dist_methods %in% unlist(phyloseq::distanceMethodList))) {
dist_methods <- c("bray", "jsd")
}
if (! is.logical(coord_cor)){
coord_cor <- FALSE
}
# --
```
# - record used R and package versions in a data frame -
PackageVersions <- data.frame(R = version$version.string,
phyloseq = packageVersion("phyloseq"),
dada2 = packageVersion("dada2"),
vegan = packageVersion("vegan"),
ggplot2 = packageVersion("ggplot2"),
dplyr = packageVersion("dplyr"),
tidyr = packageVersion("tidyr"),
gridExtra = packageVersion("gridExtra"),
xtable = packageVersion("xtable"),
RVAideMemoire = packageVersion("RVAideMemoire"),
viridis = packageVersion("viridis"),
scales = packageVersion("scales"),
ggthemes = packageVersion("ggthemes"),
DESeq2 = packageVersion("DESeq2"),
ggpubr = packageVersion("ggpubr"),
RColorBrewer = packageVersion("RColorBrewer"),
pheatmap = packageVersion("pheatmap"),
grid = packageVersion("grid"),
breakaway = packageVersion("breakaway"),
boodkdown = packageVersion("bookdown"))
for (i in 1:ncol(PackageVersions)){
PackageVersions[,i] <- as.character(PackageVersions[,i])
}
PackageVersions_l <- tidyr::gather(PackageVersions, key = Package, value = Version)
PackageVersions_l[2:nrow(PackageVersions_l), ] <- dplyr::arrange(PackageVersions_l[2:nrow(PackageVersions_l), ], Package)
# --
# - record given input parameters in a data frame -
Inputs_phyloseqAnalysis <- list(taxonomic_level = taxonomic_level,
phylum_NA_removal = phylum_NA_removal,
group_var = group_var,
group_var_levels = group_var_levels,
shape = shape,
prevalence = prevalence,
min_obs = min_obs,
taxa_sums_quantile = taxa_sums_quantile,
alpha_div_measures = alpha_div_measures,
seed = seed,
step_size = step_size,
rare_level = rare_level,
rare_max_total = rare_max_total,
dist_methods = dist_methods,
coord_cor = coord_cor)
Inputs_phyloseqAnalysis <- data.frame(Argument = names(Inputs_phyloseqAnalysis),
Value = sapply(Inputs_phyloseqAnalysis, function(x){
if (is.null(x)){
"NULL"
} else if (length(x) > 7) {
"long entry"
} else if (length(x) > 1 && length(x) < 8){
paste(x, collapse = "; ")
} else {
as.character(x)
}
}
))
rownames(Inputs_phyloseqAnalysis) <- NULL
# --
knitr::kable(PackageVersions_l)
knitr::kable(Inputs_phyloseqAnalysis)
# - remove taxa with Phylum == NA -
ps <- phyloseq::subset_taxa(ps, taxa_sums(ps) != 0)
# --
taxa_before <- ntaxa(ps)
# - remove taxa with Kingdom == NA -
ps <- phyloseq::subset_taxa(ps, !is.na(Kingdom))
# --
# - remove taxa with Phylum == NA -
if (phylum_NA_removal == "yes"){
ps <- phyloseq::subset_taxa(ps, !is.na(Phylum))
}
# --
# - caluclation of Size Factors -
SFs <- calc_SFs(physeq = ps)
# - perform tax_glom -
if (!is.null(taxonomic_level)){
ps <- phyloseq::tax_glom(ps, taxrank = taxonomic_level, NArm = FALSE)
} else {
taxonomic_level <- "Species" # for later labelling in plots, even though in this case it is ASV level analysis but there is no strain taxonomy in taxa_table
}
# --
Phyla <- check_phyla_distribution_NA(ps_tca)
PhylaForColor <- check_phyla_distribution(ps_tca) # NB: for all future plots I do not distinguish between the NA Phyla and pool them!
# - generate library_size adjusted ps object -
library_size_adjust_list <- simply_adjust_LS(ps, SFs = SFs)
ps_tca <- library_size_adjust_list[[1]]
# --
Phyla <- check_phyla_distribution_NA(ps_tca)
PhylaForColor <- check_phyla_distribution(ps_tca) # NB: for all future plots I do not distinguish between the NA Phyla and pool them!
knitr::kable(Phyla, caption = "Phyla Distribution")
# - Define here phylum colors for later plots based on the phyla distribution
phylum_colors <- make_color_vector(as.character(PhylaForColor$Phylum), QuantColors15)
# - generate barplot representations of counts before and after total count adjustment -
# I noticed that the following function is much faster when first doing taxglom, so I believe these tax_gloms can sepped up the run but are of course not necessary
psP <- phyloseq::tax_glom(ps, taxrank = "Phylum", NArm = FALSE)
ps_tcaP <- phyloseq::tax_glom(ps_tca, taxrank = "Phylum", NArm = FALSE)
bar_plot_ps_vs_ps_tca <- plot_sample_bars_compare(physeq = psP, physeq2 = ps_tcaP, x = "Sample", y = "Abundance", group_var = group_var, color_levels = color_levels, color_sample_names = TRUE, fill = "Phylum", col_vec = phylum_colors, order_by_raw_counts = TRUE)
rm(psP, ps_tcaP)
# --
# - visualise the size factors -
# NB: plot_sizeFactors removes samples that are not in color_levels!
SFList <- plot_sizeFactors(physeq = ps,SFs = SFs, group_var = group_var, color_levels = color_levels, shape = shape)
# --
bar_plot_ps_vs_ps_tca
grid.arrange(SFList[[2]], SFList[[3]], ncol = 2)
# pdf(file = "SFlm.pdf", width = 5, height = 4)
# SFList[[3]]
# dev.off()
# - filtering  -
# NB: SFs were already calculated in exploratory analysis
ps_tca_filt <- phyloseq::filter_taxa(ps_tca, function(x){
(sum(x > min_obs) > (prevalence/100)*length(x)) ||
(sum(x) > quantile(taxa_sums(ps_tca), probs = taxa_sums_quantile/100))
}, prune = TRUE)
ps_filt <- phyloseq::prune_taxa(taxa_names(ps_tca_filt), ps) # you need ps_filt for DESeq2Apply_physeq
ps_filt_ra <- phyloseq::transform_sample_counts(ps_filt, function(x){x/sum(x)})
# --
# - Generate a visual overview of the filtering step -
filterList <- visualize_filtering(physeq = ps_tca, prevalence = prevalence, taxa_sums_quantile = taxa_sums_quantile, phylum_colors = phylum_colors)
# --
physeq_to_test <- ps_filt_ra
# - calculate the beta diversity distances -
dist_list <- calc_beta_div_distances(physeq_to_test, dist_methods, group_var = group_var, compare = group_var_levels) # produces objects of class "dist"
# --
# - gemerate boxplots comparing within to between group distances and test significance by t.test-
# NB: takes time if there are many samples, so you might want to take it out if there are many
dist_analysis_list <- compare_beta_div_distances_directly_new(dist_list = dist_list, physeq = physeq_to_test, group_var = group_var, color_levels = color_levels, jitter_up_to = 100, test = "t.test", symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")),
p.adjust.method = "BH", hide.ns = FALSE)
# --
# - test significance by Permutational Multivariate Analysis of Variance Using Distance Matrix and vegan::adonis -
group_factor <- sample_data(physeq_to_test)[[group_var]]
# make sure group_factor fits to dist_list, i.e. only keep samples covered by compare = group_var_levels!
group_factor <- factor(group_factor[group_factor %in% group_var_levels], levels = group_var_levels, ordered = T)
adonis_list <- lapply(dist_list, function(dist_obj){
loop_vegan_adonis(dist_obj = dist_obj, group_fac = group_factor)
})
# --
# - construct ordination plots -
pcoas <- calc_ordination_from_distances(physeq_to_test, group_var = group_var, dist_list = dist_list, color_levels = color_levels, ordination_type = "PCoA", shape = shape, coord_cor = coord_cor, phylum_colors = phylum_colors)
TrList_samples <- pcoas[["ordination_Tr_samples"]]
TrList_taxa <- pcoas[["ordination_Tr_taxa"]]
TrList_pcoa <- c(rbind(TrList_samples, TrList_taxa)) # It works to combine lists alternatingly:)
# --
datapath <- "/Users/jvb740/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/BloodPressureViewer"
df_in <- read.csv2(file = file.path(datapath, "BSC.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
View(df_in)
str(df_in)
df_in <- read.csv2(file = file.path(datapath, "BSC.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
colnames(df_in)
colIndexes <- match(c("Date", "Time", "Systolic", "Diastolic", "Heart", "Arm", "Comment"), colnames(df_in))
colIndexes
df_in <- df_in[, colIndexes]
any(is.na(lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")))
df_in$Date <- lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")
any(is.na(lubridate::parse_date_time(df_in$Time, orders = "hm", tz = "CET")))
df_in$Time <- lubridate::parse_date_time(df_in$Time, orders = "HM", tz = "CET")
str(df_in)
df_in$Time <- HM(df_in$Time)
?HM
?hm
df_in$Time <- hm(df_in$Time)
df_in <- read.csv2(file = file.path(datapath, "BSC.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
colIndexes <- match(c("Date", "Time", "Systolic", "Diastolic", "Heart", "Arm", "Comment"), colnames(df_in))
df_in <- df_in[, colIndexes]
df_in$Date <- lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")
hm(df_in$Time)
lubridate::hm(df_in$Time)
colnames(df_in)
View(df_in)
str(df_in)
df_in <- read.csv2(file = file.path(datapath, "BSC.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
colIndexes <- match(c("Date", "Time", "Systolic", "Diastolic", "Heart", "Arm", "Comment"), colnames(df_in))
df_in <- df_in[, colIndexes]
df_in$Date <- lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")
df_in$Time <- lubridate::hm(df_in$Time)
df_in$Systolic <- as.numeric(df_in$Systolic)
df_in$Diastolic <- as.numeric(df_in$Diastolic)
df_in$Heart <- as.numeric(df_in$Heart)
str(df_in)
View(df_in)
as.character(df_in$Time)
update(df_in$Date, hour = hour(df_in$Time), minute = minute(df_in$Time))
df_in$Date + df_in$Time
df_in <- read.csv2(file = file.path(datapath, "BSC.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
colIndexes <- match(c("Date", "Time", "Systolic", "Diastolic", "Heart", "Arm", "Comment"), colnames(df_in))
df_in <- df_in[, colIndexes]
df_in$Date <- lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")
df_in$DateTime <- df_in$Date + lubridate::hm(df_in$Time)
df_in$Systolic <- as.numeric(df_in$Systolic)
df_in$Diastolic <- as.numeric(df_in$Diastolic)
df_in$Heart <- as.numeric(df_in$Heart)
View(df_in)
df_in$DateTime[1] > df_in$DateTime[nrow(df_in)]
df_in <- read.csv2(file = file.path(datapath, "BSC.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
colIndexes <- match(c("Date", "Time", "Systolic", "Diastolic", "Heart", "Arm", "Comment"), colnames(df_in))
df_in <- df_in[, colIndexes]
df_in$Date <- lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")
df_in$DateTime <- df_in$Date + lubridate::hm(df_in$Time)
df_in$Systolic <- as.numeric(df_in$Systolic)
df_in$Diastolic <- as.numeric(df_in$Diastolic)
df_in$Heart <- as.numeric(df_in$Heart)
df_in$Arm <- as.character(df_in$Arm)
df_in$comment <- as.character(df_in$Comment)
df_in <- dplyr::select(df_in, DateTime, Date:Comment)
str(df_in)
DFaPlot <- df_in
colnames(DFaPlot)
DFaPlot <- gather(DFaPlot, key = "Measure", value = "Value", Systolic:Heart)
library(shiny)
library(lubridate)
library(tidyr)
library(dplyr)
# library(rdrop2)
library(ggplot2)
library(plotly)
DFaPlot <- gather(DFaPlot, key = "Measure", value = "Value", Systolic:Heart)
View(DFaPlot)
Tr <- ggplot(DFaPlot, aes(x = DateTime, y = Measure, col = Measure))
Tr +
geom_point(size = 1, alpha = 0.8) +
facet_wrap(~ Measure)
Tr <- ggplot(DFaPlot, aes(x = DateTime, y = Value, col = Measure))
Tr +
geom_point(size = 1, alpha = 0.8) +
facet_wrap(~ Measure)
Tr +
geom_point(size = 1, alpha = 0.8) +
facet_wrap(~ Measure, scales = "free.y")
Tr +
geom_point(size = 1, alpha = 0.8) +
facet_wrap(~ Measure, scales = "free_y")
Tr +
geom_point(size = 1, alpha = 0.8) +
facet_wrap(~ Measure, scales = "free_y") +
geom_smooth(aes(group = Measure), method = "lm", se = TRUE)
measure_colors <- c("Systolic" = cbPalette[7], "Diastolic" = cbPalette[2], "Heart" = cbPalette[4])
Tr <- ggplot(DFaPlot, aes(x = DateTime, y = Value, col = Measure))
Tr +
geom_point(size = 1, alpha = 0.8) +
facet_wrap(~ Measure) +
geom_smooth(aes(group = Measure), method = "lm", se = TRUE) +
scale_color_manual("", values = measure_colors) +
theme_bw()
DFaPlot$Measure <- factor(DFaPlot$Measure, levels = c("Systolic", "Diastolic", "Heart"), ordered = TRUE)
Tr <- ggplot(DFaPlot, aes(x = DateTime, y = Value, col = Measure))
Tr +
geom_point(size = 1, alpha = 0.8) +
# facet_wrap(~ Measure) +
geom_smooth(aes(group = Measure), method = "lm", se = TRUE) +
scale_color_manual("", values = measure_colors) +
theme_bw()
DFaPlot1 <- filter(DFaPlot, Measure %in% c("Systolic", "Diastolic"))
Tr <- ggplot(DFaPlot1, aes(x = DateTime, y = Value, col = Measure))
Tr +
geom_point(size = 1, alpha = 0.8) +
# facet_wrap(~ Measure) +
geom_smooth(aes(group = Measure), method = "lm", se = TRUE) +
scale_color_manual("", values = measure_colors) +
theme_bw() +
theme(legend.position = "none")
DFaPlot1 <- filter(DFaPlot, Measure %in% c("Systolic", "Diastolic"))
DFaPlot2 <- filter(DFaPlot, Measure %in% c("Heart"))
Tr <- ggplot(DFaPlot1, aes(x = DateTime, y = Value, col = Measure))
Tr <- Tr +
geom_point(size = 1, alpha = 0.8) +
# facet_wrap(~ Measure) +
geom_smooth(aes(group = Measure), method = "lm", se = TRUE) +
scale_color_manual("", values = measure_colors) +
theme_bw() +
xlab("") +
ylab("pressure in mmHg")
Tr
DFaPlot2 <- filter(DFaPlot, Measure %in% c("Heart"))
Tr1 <- ggplot(DFaPlot2, aes(x = DateTime, y = Value, col = Measure))
Tr1 +
geom_point(size = 1, alpha = 0.8) +
# facet_wrap(~ Measure) +
geom_smooth(aes(group = Measure), method = "lm", se = TRUE) +
scale_color_manual("", values = measure_colors) +
theme_bw() +
xlab("")
Tr <- ggplot(DFaPlot1, aes(x = DateTime, y = Value, col = Measure))
Tr <- Tr +
geom_point(size = 1, alpha = 0.8) +
# facet_wrap(~ Measure) +
geom_smooth(aes(group = Measure), method = "lm", se = TRUE) +
scale_color_manual("", values = measure_colors) +
theme_bw() +
xlab("") +
ylab("pressure in mmHg")
Tr1 <- ggplot(DFaPlot2, aes(x = DateTime, y = Value, col = Measure))
Tr1 <- Tr1 +
geom_point(size = 1, alpha = 0.8) +
# facet_wrap(~ Measure) +
geom_smooth(aes(group = Measure), method = "lm", se = TRUE) +
scale_color_manual("", values = measure_colors) +
theme_bw() +
xlab("") +
theme(legend.position = "none") +
ylab("heartbeats per minute")
Tr
Tr1
library(gridExtra)
grid.arrange(Tr, Tr1, nrow = 2)
Tr <- ggplot(DFaPlot, aes(x = DateTime, y = Value, col = Measure))
Tr +
geom_point(size = 1, alpha = 0.8) +
facet_wrap(~ Measure, ncol = 1) +
geom_smooth(aes(group = Measure), method = "lm", se = TRUE) +
scale_color_manual("", values = measure_colors) +
theme_bw() +
xlab("")
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/BloodPressureViewer/app_bloodpressureViewer.R')
?plotlyOutput
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/BloodPressureViewer/app_bloodpressureViewer.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/BloodPressureViewer/app_bloodpressureViewer.R')
?format
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/BloodPressureViewer/app_bloodpressureViewer.R')
datapath <- "/Users/jvb740/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/BloodPressureViewer"
df_in <- read.csv2(file = file.path(datapath, "BSC.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
colIndexes <- match(c("Date", "Time", "Systolic", "Diastolic", "Heart", "Arm", "Comment"), colnames(df_in))
df_in <- df_in[, colIndexes]
df_in$Date <- lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")
df_in$DateTime <- df_in$Date + lubridate::hm(df_in$Time)
df_in$Systolic <- as.numeric(df_in$Systolic)
df_in$Diastolic <- as.numeric(df_in$Diastolic)
df_in$Heart <- as.numeric(df_in$Heart)
df_in$Arm <- as.character(df_in$Arm)
df_in$comment <- as.character(df_in$Comment)
df_in <- dplyr::select(df_in, DateTime, Date:Comment)
DFaPlot <- df_in
DFaPlot <- gather(DFaPlot, key = "Measure", value = "Value", Systolic:Heart)
DFaPlot$Measure <- factor(DFaPlot$Measure, levels = c("Systolic", "Diastolic", "Heart"), ordered = TRUE)
colnames(DFaPlot)
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/BloodPressureViewer/app_bloodpressureViewer.R')
DFaPlot$DateTime
format(DFaPlot$DateTime)
format(DFaPlot$DateTime)
class(format(DFaPlot$DateTime))
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/BloodPressureViewer/app_bloodpressureViewer.R')
rm(list = ls())
