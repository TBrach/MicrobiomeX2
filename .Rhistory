TbT_DF_l$Group <- factor(TbT_DF_l$Group, levels = group_var_levels, ordered = T)
# --
# - change all ratios where either nominator taxon or denominator taxon had count = 0 to NA -
# remember: 0/0 = NaN (not finite), 0/x = 0, x/0 = Inf
TbT_DF_l$Ratio[!is.finite(TbT_DF_l$Ratio) | TbT_DF_l$Ratio == 0] <- NA
# --
# - find taxa that would throw an error in statistical test and remove those taxa from DF -
# first find the taxa that would throw an error in t.test or wilcox.test
var_plus_length_check <- group_by(TbT_DF_l, Taxon, Group) %>% summarise(Variance = var(Ratio, na.rm = T), NotNA = sum(!is.na(Ratio)))
if (test == "t.test"){
var_plus_length_check <- dplyr::filter(var_plus_length_check, !(Variance > 0) | NotNA < 2) # variance > 0 also to remove test where host_taxon == taxon
} else if (test == "wilcox.test") {
var_plus_length_check <- dplyr::filter(var_plus_length_check, !(Variance > 0) | NotNA < 1)
}
if (nrow(var_plus_length_check) != 0) {
TbT_DF_l <- filter(TbT_DF_l, !(Taxon %in% unique(var_plus_length_check$Taxon)))
}
# --
# - use ggpubr::compare_menas to calculate all pValues of the Ratios for the different taxa_den between current group_levels -
pVals <- ggpubr::compare_means(formula = Ratio ~ Group, data = TbT_DF_l, group.by = "Taxon", method = test, p.adjust.method = p_adjust_method, symnum.args = symnum.args)
pVals <- dplyr::arrange(pVals, p)
# NB: the pVals change when you log the ratios (scale_y_log10())
TbT_DF_l$RatioLog10 <- log10(TbT_DF_l$Ratio)
pValsLog <- ggpubr::compare_means(formula = RatioLog10 ~ Group, data = TbT_DF_l, group.by = "Taxon", method = test, p.adjust.method = p_adjust_method, symnum.args = symnum.args)
pValsLog <- dplyr::arrange(pValsLog, p)
# --
# NB: I plot now for log and non log independently, even though ggpubr is so smart to change the p-values when you just use
# Tr + scale_y_log10(). I plot independently because log might change the order!
TbT_DF_l_log <- TbT_DF_l
# - order taxa based on pVals result or based on tax_order -
if (is.null(tax_order)){
TbT_DF_l$Taxon <- factor(TbT_DF_l$Taxon, levels = unique(pVals$Taxon), ordered = TRUE)
TbT_DF_l_log$Taxon <- factor(TbT_DF_l_log$Taxon, levels = unique(pValsLog$Taxon), ordered = TRUE)
} else {
if(!all(unique(pVals$Taxon) %in% tax_order)){
stop("given tax_order does not fit to tax_names")
}
TbT_DF_l$Taxon <- factor(TbT_DF_l$Taxon, levels = tax_order, ordered = TRUE)
TbT_DF_l_log$Taxon <- factor(TbT_DF_l_log$Taxon, levels = tax_order, ordered = TRUE)
}
# --
# - since you might have more than two levels in each plot you need to set the comparisons argument in stat_compare_means -
# comparisonList <- list(group_var_levels)
# --
# - plot: NB: also for non removed taxa some samples might have NA ratios that will be removed -
Tr <- ggplot(TbT_DF_l, aes(x = Group, y = Ratio, col = Group))
Tr <- Tr +
geom_violin() +
geom_point(size = 1, alpha = 0.6, position = position_jitterdodge(dodge.width = 1)) +
# scale_color_manual(values = c(color_lookup$color[i], color_lookup$color[j])) +
scale_color_manual(values = color_levels) +
facet_wrap(~ Taxon, scales = "free_y") +
xlab("") +
ylab(paste("abundance ratio of", taxa_nom, "to stated taxon")) +
theme_bw() +
theme(legend.position = "none")
# Tr <- Tr + ggpubr::stat_compare_means(comparisons = comparisonList, label = "p.signif", method = "t.test", hide.ns = hide.ns)
Tr <- Tr + ggpubr::stat_compare_means(label = "p.signif", method = test, label.x = 1.5, hide.ns = hide.ns)
Tr1 <- ggplot(TbT_DF_l, aes(x = Group, y = Ratio, col = Group))
Tr1 <- Tr1 +
geom_boxplot(outlier.color = NA) +
geom_point(size = 1, alpha = 0.6, position = position_jitterdodge(dodge.width = 1)) +
# scale_color_manual(values = c(color_lookup$color[i], color_lookup$color[j])) +
scale_color_manual(values = color_levels) +
facet_wrap(~ Taxon, scales = "free_y") +
xlab("") +
ylab(paste("abundance ratio of", taxa_nom, "to stated taxon")) +
theme_bw() +
theme(legend.position = "none")
Tr1 <- Tr1 + ggpubr::stat_compare_means(label.x = 1.5, label = "p.signif", method = test, hide.ns = hide.ns) # p.format
Tr2 <- ggplot(TbT_DF_l_log, aes(x = Group, y = Ratio, col = Group))
Tr2 <- Tr2 +
geom_violin() +
geom_point(size = 1, alpha = 0.6, position = position_jitterdodge(dodge.width = 1)) +
# scale_color_manual(values = c(color_lookup$color[i], color_lookup$color[j])) +
scale_color_manual(values = color_levels) +
facet_wrap(~ Taxon, scales = "free_y") +
xlab("") +
ylab(paste("abundance ratio of", taxa_nom, "to stated taxon")) +
theme_bw() +
theme(legend.position = "none")
Tr2 <- Tr2 + ggpubr::stat_compare_means(label.x = 1.5, label = "p.signif", method = test, hide.ns = hide.ns)
Tr2 <- Tr2 + scale_y_log10()
Tr3 <- ggplot(TbT_DF_l_log, aes(x = Group, y = Ratio, col = Group))
Tr3 <- Tr3 +
geom_boxplot(outlier.color = NA) +
geom_point(size = 1, alpha = 0.6, position = position_jitterdodge(dodge.width = 1)) +
# scale_color_manual(values = c(color_lookup$color[i], color_lookup$color[j])) +
scale_color_manual(values = color_levels) +
facet_wrap(~ Taxon, scales = "free_y") +
xlab("") +
ylab(paste("abundance ratio of", taxa_nom, "to stated taxon")) +
theme_bw() +
theme(legend.position = "none")
Tr3 <- Tr3 + ggpubr::stat_compare_means(label.x = 1.5, label = "p.signif", method = test, hide.ns = hide.ns)
Tr3 <- Tr3 + scale_y_log10()
list(pVals = pVals, Tr = Tr, Tr1 = Tr1, pValsLog = pValsLog, Tr2 = Tr2, Tr3 = Tr3)
}
rm(list = ls())
# - source all functions -
functionpath <- "./Functions"
source(file.path(functionpath, "000_helper_functions.R"))
source(file.path(functionpath, "010_explore_ps_functions.R"))
source(file.path(functionpath, "020_preprocess_filtering_functions.R"))
source(file.path(functionpath, "030_alpha_diversity_functions.R"))
source(file.path(functionpath, "040_beta_diversity_functions.R"))
#source(file.path(functionpath, "050_diff_abundance_functions.R"))
source(file.path(functionpath, "060_phylum_analysis_functions.R"))
source(file.path(functionpath, "n_050_diff_abundance_functions.R"))
# - load your phyloseq object -
# NB: USER INPUT
# name_phyloseq_rds <- "physeq_Men.rds"
name_phyloseq_rds <- "physeq_Men_Hol.rds"
# NB: USER INPUT
datapath <- "./Example_phyloseq_objects"
# Test your input:
if(! file.exists(file.path(datapath, name_phyloseq_rds))){
stop("The given path/file to your phyloseq object does not exist.")
}
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
# --
# - Define the group variable for sample comparisons -
# NB: USER INPUT
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
# Test your input:
if(! group_var %in% colnames(sample_data(ps))) {
stop("The given group_var is not a variable in the sample data of the loaded phyloseq object.")
}
# --
# - Define the two levels in your group_var that you want to compare -
# NB: USER INPUT
group_var_levels <- c("IN", "DK") # defines the order of the groups in all plots. If set to NULL:
if (is.null(group_var_levels)) {
group_var_levels <- unique(sample_data(ps)[[group_var]])
}
# Test your input:
if (!all(group_var_levels %in% unique(sample_data(ps)[[group_var]]))) {
stop("Not all given group_var_levels are actually levels in group_var column.")
}
if (length(group_var_levels) != 2) {
stop("Sorry, for MicrobiomeX2 group_var_levels needs to consist of exactly 2 levels.")
}
# --
# - Set the colors representing the groups in your group_var -
# NB: USER INPUT
color_levels <- c(cbPalette[2], cbPalette[4]) # choose your preferred colors for each group in your group_var. If set to NULL:
if (is.null(color_levels)) {
color_levels <- c(cbPalette[2], cbPalette[4])
}
# Test your input:
if (length(color_levels) != length(group_var_levels)) {
stop("The number of colors in the given color_levels did not fit to group_var_levels.")
}
if (!all(areColors(color_levels))) {
stop("Stopped because not all entries in color_levels were valid R colors.")
}
names(color_levels) <- group_var_levels
# --
# - optional: use another variable in sample_data(ps) as shape in some of the plots -
# NB: user input
shape <- "Gender"
# Test your input:
if (!is.null(shape)) {
if (! shape %in% colnames(sample_data(ps))) {
stop("The given shape is not a variable in the sample data of the loaded phyloseq object.")
}
}
# --
# - Set the taxonomic_level for the analysis -
# NB: You can choose all levels within colnames(tax_table(ps))
# phyloseq::taxglom to that level will be used.
# if you set taxonomic_level to NULL, all taxa will be analysed (i.e. strain/species/ASV level analysis)
# NB user input
taxonomic_level <- "Genus"
# NB user input
phylum_NA_removal <- "no" # if yes you remove all taxa for which Phylum = NA before the analyses
# Test your input:
if (!is.null(taxonomic_level) && !(taxonomic_level %in% colnames(tax_table(ps)))){
stop("You provided a taxonomic_level that is not present in the tax_table of the loaded phyloseq object.")
}
# --
# - Filtering inputs -
# NB: user input
prevalence <- 0 # in percent, for prevalence filtering of taxa
# NB: user input
min_obs <- 0L # in counts, a taxon will be considered present (for prevalence) if count > min_obs
# NB: user input
taxa_sums_quantile <- 100 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence filter
# Test filtering inputs and set invalid inputs to defaults
if (!is.numeric(prevalence) || prevalence < 0 || prevalence > 100) {
prevalence <- 5
}
if (!is.numeric(min_obs)) {
min_obs <- 0L
}
if (!is.numeric(taxa_sums_quantile) || taxa_sums_quantile < 0 || taxa_sums_quantile > 100) {
taxa_sums_quantile <- 0
}
# --
# - Alpha diversity and rarifaction inputs -
# NB: user input
alpha_div_measures <- c("Observed", "Shannon") # ?phyloseq::estimate_richness: may include c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher")
# NB: user input
seed <- 1234 # for reproducibility of rarefaction curves
# NB: user input
step_size <- 200 # steps in sample_sums for rarefaction curves
# NB: user input
rare_level <- NULL # sample_sums/total_counts level to which rarefaction is perforemd, if NULL, min(sample_sums(ps)) is used!
# NB: user input
rare_max_total <- NULL # maximal sample_sums/total_counts value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# Test alpha-diversity inputs and set invalid inputs to defaults
if (! all(alpha_div_measures %in% c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher"))) {
alpha_div_measures <- c("Observed", "Shannon")
}
if (!is.numeric(seed)) {
seed <- 1234
}
if (!is.numeric(step_size)) {
step_size <- 200
}
if (!is.numeric(rare_level)) {
rare_level <- NULL # will be changed to min(sample_sums(ps))
}
if (!is.numeric(rare_max_total)) {
rare_max_total <- NULL # quantile(sample_sums(ps), probs = .25)
}
# --
# - beta diversity inputs -
dist_methods <- c("bray") # otions: see unlist(phyloseq::distanceMethodList)
coord_cor <- FALSE # adjustment of the axis representation in ordination plots
# Test beta diversity inputs and set invalid inputs to defaults
if (! all(dist_methods %in% unlist(phyloseq::distanceMethodList))) {
dist_methods <- c("bray")
}
if (! is.logical(coord_cor)){
coord_cor <- FALSE
}
# --
# - record used R and package versions in a data frame -
PackageVersions <- data.frame(R = version$version.string,
phyloseq = packageVersion("phyloseq"),
dada2 = packageVersion("dada2"),
vegan = packageVersion("vegan"),
ggplot2 = packageVersion("ggplot2"),
dplyr = packageVersion("dplyr"),
tidyr = packageVersion("tidyr"),
gridExtra = packageVersion("gridExtra"),
xtable = packageVersion("xtable"),
viridis = packageVersion("viridis"),
scales = packageVersion("scales"),
ggthemes = packageVersion("ggthemes"),
DESeq2 = packageVersion("DESeq2"),
ggpubr = packageVersion("ggpubr"),
RColorBrewer = packageVersion("RColorBrewer"),
pheatmap = packageVersion("pheatmap"),
grid = packageVersion("grid"))
for (i in 1:ncol(PackageVersions)){
PackageVersions[,i] <- as.character(PackageVersions[,i])
}
PackageVersions_l <- tidyr::gather(PackageVersions, key = Package, value = Version)
PackageVersions_l[2:nrow(PackageVersions_l), ] <- dplyr::arrange(PackageVersions_l[2:nrow(PackageVersions_l), ], Package)
# --
# - record given input parameters in a data frame -
Inputs_phyloseqAnalysis <- list(taxonomic_level = taxonomic_level,
phylum_NA_removal = phylum_NA_removal,
group_var = group_var,
group_var_levels = group_var_levels,
shape = shape,
prevalence = prevalence,
min_obs = min_obs,
taxa_sums_quantile = taxa_sums_quantile,
alpha_div_measures = alpha_div_measures,
seed = seed,
step_size = step_size,
rare_level = rare_level,
rare_max_total = rare_max_total,
dist_methods = dist_methods,
coord_cor = coord_cor)
Inputs_phyloseqAnalysis <- data.frame(Argument = names(Inputs_phyloseqAnalysis),
Value = sapply(Inputs_phyloseqAnalysis, function(x){
if (is.null(x)){
"NULL"
} else if (length(x) > 7) {
"long entry"
} else if (length(x) > 1 && length(x) < 8){
paste(x, collapse = "; ")
} else {
as.character(x)
}
}
))
rownames(Inputs_phyloseqAnalysis) <- NULL
# --
# - remove taxa with Phylum == NA -
ps <- phyloseq::subset_taxa(ps, taxa_sums(ps) != 0)
# --
Phyla <- check_phyla_distribution(ps)
knitr::kable(Phyla, caption = "Phyla Distribution")
phylum_colors <- make_color_vector(as.character(Phyla$Phylum), QuantColors15)
# - caluclation of Size Factors -
SFs <- calc_SFs(physeq = ps)
# --
# - perform tax_glom -
if (!is.null(taxonomic_level)){
ps <- phyloseq::tax_glom(ps, taxrank = taxonomic_level, NArm = FALSE)
} else {
taxonomic_level <- "Species" # for later labelling in plots, even though in this case it is ASV level analysis but there is no strain taxonomy in taxa_table
}
# --
# - filtering  -
# NB: SFs were already calculated in exploratory analysis before tax_glom!
library_size_adjust_list <- simply_adjust_LS(ps, SFs = SFs)
ps_tca <- library_size_adjust_list[[1]] # tca: total counts adjusted
ps_tca_filt <- phyloseq::filter_taxa(ps_tca, function(x){
(sum(x > min_obs) > (prevalence/100)*length(x)) ||
(sum(x) > quantile(taxa_sums(ps_tca), probs = taxa_sums_quantile/100))
}, prune = TRUE)
ps_filt <- phyloseq::prune_taxa(taxa_names(ps_tca_filt), ps) # you need ps_filt for DESeq2Apply_physeq
# --
# - Generate a visual overview of the filtering step -
filterList <- visualize_filtering(physeq = ps_tca, prevalence = prevalence, taxa_sums_quantile = taxa_sums_quantile, col_vec = NULL)
# --
if (taxonomic_level != "Phylum"){
ps <- phyloseq::tax_glom(ps, taxrank = "Phylum", NArm = FALSE)
taxonomic_level <- "Phylum"
}
ps_ra <- phyloseq::transform_sample_counts(ps, function(x){x/sum(x)})
bar_plot_ps_ra <- plot_sample_bars(physeq = ps_ra, x = "Sample", y = "Abundance", group_var = group_var, color_levels = color_levels, fill = "Phylum", color_sample_names = TRUE, col_vec = phylum_colors, facet_grid = NULL)
bar_plot_ps_ra
# - choose the physeq object to run the test on -
physeq_to_test <- ps
taxa_annotation <- get_taxon_names(as.data.frame(tax_table(ps)))
# - plot Firmicutes to all other phyla ratio plots NB: you could change taxa_den to maybe only Bacteroidetes -
FirmicutesRatioPlots <- plot_taxa_ratiosSingle(physeq = physeq_to_test, group_var = group_var, color_levels = color_levels, tax_names = taxa_annotation, taxa_nom = "Firmicutes", taxa_den = NULL, test = "wilcox.test", p_adjust_method = "fdr", symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
plot_taxa_ratiosSingle <- function(physeq, group_var, color_levels, tax_names = NULL,
taxa_nom = "Firmicutes", taxa_den = NULL, test = "t.test", p_adjust_method = "fdr",
tax_order = NULL,
symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")), hide.ns = FALSE) {
if (taxa_are_rows(physeq)) {
physeq <- t(physeq)
}
if(! group_var %in% colnames(sample_data(physeq))) {
stop("The given group_var is not a variable in the sample data of the loaded phyloseq object.")
}
if (!(test %in% c("t.test", "wilcox.test"))) {
stop("test should be t.test or wilcox.test")
}
group_fac <- factor(sample_data(physeq)[[group_var]])
compare <- names(color_levels)
if (!is.null(compare)) {
group_var_levels <- compare
} else {
group_var_levels <- levels(group_fac)
}
if (length(group_var_levels) != 2) {
stop(paste0("compare (group_var_levels) must consist of two groups - you asked for ",
paste(group_var_levels, collapse = ", ")))
}
if (!all(group_var_levels %in% levels(group_fac))) {
stop("Not all given compare (group_var_levels) are actually levels in group_var column.")
}
# - check that given tax_names fit to physeq and change taxa_names of physeq -
if (is.null(tax_names)){
tax_names <- paste("T", 1:ntaxa(physeq), sep = "_")
}
if(!identical(ntaxa(physeq), length(tax_names))){stop("tax_names do not fit in length to physeq")}
tax_names <- make.unique(tax_names)
taxa_names(physeq) <- tax_names
# --
# - calculate the matrix taxa_nom/(all other taxa) -
CT <- t(as(otu_table(physeq), 'matrix')) # now taxa are rows and samples are columns
i <- group_var_levels[1]
j <- group_var_levels[2]
CT <- CT[, group_fac %in% c(i, j)]
i <- which(rownames(CT) == taxa_nom)
if (length(i) != 1) {stop("taxa_nom not found in tax_names or tax_names not unique!")}
TbTmatrix <- apply(CT, 2, function(samp_cnts){samp_cnts[i]/samp_cnts})
# produces for each taxon (= host taxon) a TbTMatrix
# NB: there are possibly Inf, and NaN values in the matrix, specifically
# 0/x = 0, x/0 = Inf; 0/0 = NaN!
# --
TbT_DF <- as.data.frame(TbTmatrix)
TbT_DF$Taxon <- rownames(TbT_DF)
# - use taxa_den (denominator) to restrict the taxa to which taxa_nom is compared to -
if (is.null(taxa_den)) {taxa_den <- tax_names}
TbT_DF <- TbT_DF[TbT_DF$Taxon %in% taxa_den, ]
# --
# - change to long DF -
TbT_DF_l <- gather(TbT_DF, key = Sample, value = Ratio, -Taxon)
# --
# - add the group_var level information  -
LookUpDF <- data.frame(Sample = sample_names(physeq), Group = sample_data(physeq)[[group_var]])
TbT_DF_l$Group <- as.character(LookUpDF$Group[match(TbT_DF_l$Sample, LookUpDF$Sample)])
TbT_DF_l$Group <- factor(TbT_DF_l$Group, levels = group_var_levels, ordered = T)
# --
# - change all ratios where either nominator taxon or denominator taxon had count = 0 to NA -
# remember: 0/0 = NaN (not finite), 0/x = 0, x/0 = Inf
TbT_DF_l$Ratio[!is.finite(TbT_DF_l$Ratio) | TbT_DF_l$Ratio == 0] <- NA
# --
# - find taxa that would throw an error in statistical test and remove those taxa from DF -
# first find the taxa that would throw an error in t.test or wilcox.test
var_plus_length_check <- group_by(TbT_DF_l, Taxon, Group) %>% summarise(Variance = var(Ratio, na.rm = T), NotNA = sum(!is.na(Ratio)))
if (test == "t.test"){
var_plus_length_check <- dplyr::filter(var_plus_length_check, !(Variance > 0) | NotNA < 2) # variance > 0 also to remove test where host_taxon == taxon
} else if (test == "wilcox.test") {
var_plus_length_check <- dplyr::filter(var_plus_length_check, !(Variance > 0) | NotNA < 1)
}
if (nrow(var_plus_length_check) != 0) {
TbT_DF_l <- filter(TbT_DF_l, !(Taxon %in% unique(var_plus_length_check$Taxon)))
}
# --
# - use ggpubr::compare_menas to calculate all pValues of the Ratios for the different taxa_den between current group_levels -
pVals <- ggpubr::compare_means(formula = Ratio ~ Group, data = TbT_DF_l, group.by = "Taxon", method = test, p.adjust.method = p_adjust_method, symnum.args = symnum.args)
pVals <- dplyr::arrange(pVals, p)
# NB: the pVals change when you log the ratios (scale_y_log10())
TbT_DF_l$RatioLog10 <- log10(TbT_DF_l$Ratio)
pValsLog <- ggpubr::compare_means(formula = RatioLog10 ~ Group, data = TbT_DF_l, group.by = "Taxon", method = test, p.adjust.method = p_adjust_method, symnum.args = symnum.args)
pValsLog <- dplyr::arrange(pValsLog, p)
# --
# NB: I plot now for log and non log independently, even though ggpubr is so smart to change the p-values when you just use
# Tr + scale_y_log10(). I plot independently because log might change the order!
TbT_DF_l_log <- TbT_DF_l
# - order taxa based on pVals result or based on tax_order -
if (is.null(tax_order)){
TbT_DF_l$Taxon <- factor(TbT_DF_l$Taxon, levels = unique(pVals$Taxon), ordered = TRUE)
TbT_DF_l_log$Taxon <- factor(TbT_DF_l_log$Taxon, levels = unique(pValsLog$Taxon), ordered = TRUE)
} else {
if(!all(unique(pVals$Taxon) %in% tax_order)){
stop("given tax_order does not fit to tax_names")
}
TbT_DF_l$Taxon <- factor(TbT_DF_l$Taxon, levels = tax_order, ordered = TRUE)
TbT_DF_l_log$Taxon <- factor(TbT_DF_l_log$Taxon, levels = tax_order, ordered = TRUE)
}
# --
# - since you might have more than two levels in each plot you need to set the comparisons argument in stat_compare_means -
# comparisonList <- list(group_var_levels)
# --
# - plot: NB: also for non removed taxa some samples might have NA ratios that will be removed -
Tr <- ggplot(TbT_DF_l, aes(x = Group, y = Ratio, col = Group))
Tr <- Tr +
geom_violin() +
geom_point(size = 1, alpha = 0.6, position = position_jitterdodge(dodge.width = 1)) +
# scale_color_manual(values = c(color_lookup$color[i], color_lookup$color[j])) +
scale_color_manual(values = color_levels) +
facet_wrap(~ Taxon, scales = "free_y") +
xlab("") +
ylab(paste("abundance ratio of", taxa_nom, "to stated taxon")) +
theme_bw() +
theme(legend.position = "none")
# Tr <- Tr + ggpubr::stat_compare_means(comparisons = comparisonList, label = "p.signif", method = "t.test", hide.ns = hide.ns)
Tr <- Tr + ggpubr::stat_compare_means(label = "p.signif", method = test, label.x = 1.5, hide.ns = hide.ns)
Tr1 <- ggplot(TbT_DF_l, aes(x = Group, y = Ratio, col = Group))
Tr1 <- Tr1 +
geom_boxplot(outlier.color = NA) +
geom_point(size = 1, alpha = 0.6, position = position_jitterdodge(dodge.width = 1)) +
# scale_color_manual(values = c(color_lookup$color[i], color_lookup$color[j])) +
scale_color_manual(values = color_levels) +
facet_wrap(~ Taxon, scales = "free_y") +
xlab("") +
ylab(paste("abundance ratio of", taxa_nom, "to stated taxon")) +
theme_bw() +
theme(legend.position = "none")
Tr1 <- Tr1 + ggpubr::stat_compare_means(label.x = 1.5, label = "p.signif", method = test, hide.ns = hide.ns) # p.format
Tr2 <- ggplot(TbT_DF_l_log, aes(x = Group, y = Ratio, col = Group))
Tr2 <- Tr2 +
geom_violin() +
geom_point(size = 1, alpha = 0.6, position = position_jitterdodge(dodge.width = 1)) +
# scale_color_manual(values = c(color_lookup$color[i], color_lookup$color[j])) +
scale_color_manual(values = color_levels) +
facet_wrap(~ Taxon, scales = "free_y") +
xlab("") +
ylab(paste("abundance ratio of", taxa_nom, "to stated taxon")) +
theme_bw() +
theme(legend.position = "none")
Tr2 <- Tr2 + ggpubr::stat_compare_means(label.x = 1.5, label = "p.signif", method = test, hide.ns = hide.ns)
Tr2 <- Tr2 + scale_y_log10()
Tr3 <- ggplot(TbT_DF_l_log, aes(x = Group, y = Ratio, col = Group))
Tr3 <- Tr3 +
geom_boxplot(outlier.color = NA) +
geom_point(size = 1, alpha = 0.6, position = position_jitterdodge(dodge.width = 1)) +
# scale_color_manual(values = c(color_lookup$color[i], color_lookup$color[j])) +
scale_color_manual(values = color_levels) +
facet_wrap(~ Taxon, scales = "free_y") +
xlab("") +
ylab(paste("abundance ratio of", taxa_nom, "to stated taxon")) +
theme_bw() +
theme(legend.position = "none")
Tr3 <- Tr3 + ggpubr::stat_compare_means(label.x = 1.5, label = "p.signif", method = test, hide.ns = hide.ns)
Tr3 <- Tr3 + scale_y_log10()
list(pVals = pVals, Tr = Tr, Tr1 = Tr1, pValsLog = pValsLog, Tr2 = Tr2, Tr3 = Tr3)
}
# - plot Firmicutes to all other phyla ratio plots NB: you could change taxa_den to maybe only Bacteroidetes -
FirmicutesRatioPlots <- plot_taxa_ratiosSingle(physeq = physeq_to_test, group_var = group_var, color_levels = color_levels, tax_names = taxa_annotation, taxa_nom = "Firmicutes", taxa_den = NULL, test = "wilcox.test", p_adjust_method = "fdr", symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
FirmicutesRatioPlots[[3]]
# - plot Firmicutes to all other phyla ratio plots NB: you could change taxa_den to maybe only Bacteroidetes -
FirmicutesRatioPlots <- plot_taxa_ratiosSingle(physeq = physeq_to_test, group_var = group_var, color_levels = color_levels, tax_names = taxa_annotation, taxa_nom = "Firmicutes", taxa_den = NULL, tax_order = names(phylum_colors), test = "wilcox.test", p_adjust_method = "fdr", symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
FirmicutesRatioPlots[[2]]
FirmicutesRatioPlots[[6]]
# - choose the physeq object to run the test on -
physeq_to_test <- ps
# - calculate ratio matrixes  -
raw_TbTmatrixes <- calculate_raw_TbTmatrixesSingle(physeq = physeq_to_test, group_var = group_var, compare = group_var_levels)
taxa_annotation <- get_taxon_names(as.data.frame(tax_table(ps)))
TbT_tile <- create_raw_TbT_TilePlotsSingle(raw_TbTmatrixes, physeq = physeq_to_test, group_var = group_var, color_levels = color_levels, signi_level = 0.1, tax_names = taxa_annotation, tax_order = names(phylum_colors), test = "wilcoxon", p_adjust_method = "none")
TbT_tile
raw_TbTmatrixes <- lapply(raw_TbTmatrixes, log10)
TbT_tile <- create_raw_TbT_TilePlotsSingle(raw_TbTmatrixes, physeq = physeq_to_test, group_var = group_var, color_levels = color_levels, signi_level = 0.1, tax_names = taxa_annotation, tax_order = names(phylum_colors), test = "wilcoxon", p_adjust_method = "none")
TbT_tile
# - calculate ratio matrixes  -
raw_TbTmatrixes <- calculate_raw_TbTmatrixesSingle(physeq = physeq_to_test, group_var = group_var, compare = group_var_levels)
create_raw_TbT_TilePlotsSingle(raw_TbTmatrixes, physeq = physeq_to_test, group_var = group_var, color_levels = color_levels, signi_level = 0.1, tax_names = taxa_annotation, tax_order = names(phylum_colors), test = "wilcoxon", p_adjust_method = "none")
rm(list = ls())
