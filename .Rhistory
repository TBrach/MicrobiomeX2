# NB: user input
min_obs <- 0L # in counts, a taxon will be considered present (for prevalence) if count > min_obs
# NB: user input
taxa_sums_quantile <- 100 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence filter
# Test filtering inputs and set invalid inputs to defaults
if (!is.numeric(prevalence) || prevalence < 0 || prevalence > 100) {
prevalence <- 0
}
if (!is.numeric(min_obs)) {
min_obs <- 0L
}
if (!is.numeric(taxa_sums_quantile) || taxa_sums_quantile < 0 || taxa_sums_quantile > 100) {
taxa_sums_quantile <- 100
}
# --
# - Alpha diversity and rarifaction inputs -
# NB: user input
alpha_div_measures <- c("Observed", "Shannon") # ?phyloseq::estimate_richness: may include c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher")
# NB: user input
seed <- 1234 # for reproducibility of rarefaction curves
# NB: user input
step_size <- 200 # steps in sample_sums for rarefaction curves
# NB: user input
rare_level <- NULL # sample_sums/total_counts level to which rarefaction is perforemd, if NULL, min(sample_sums(ps)) is used!
# NB: user input
rare_max_total <- NULL # maximal sample_sums/total_counts value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# Test alpha-diversity inputs and set invalid inputs to defaults
if (! all(alpha_div_measures %in% c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher"))) {
alpha_div_measures <- c("Observed", "Shannon")
}
if (!is.numeric(seed)) {
seed <- 1234
}
if (!is.numeric(step_size)) {
step_size <- 200
}
if (!is.numeric(rare_level)) {
rare_level <- NULL # will be changed to min(sample_sums(ps))
}
if (!is.numeric(rare_max_total)) {
rare_max_total <- NULL # quantile(sample_sums(ps), probs = .25)
}
# --
# - beta diversity inputs -
dist_methods <- c("bray", "jsd") # otions: see unlist(phyloseq::distanceMethodList)
coord_cor <- FALSE # adjustment of the axis representation in ordination plots
# Test beta diversity inputs and set invalid inputs to defaults
if (! all(dist_methods %in% unlist(phyloseq::distanceMethodList))) {
dist_methods <- c("bray", "jsd")
}
if (! is.logical(coord_cor)){
coord_cor <- FALSE
}
# --
# - remove taxa not present in a single sample -
ps <- phyloseq::subset_taxa(ps, taxa_sums(ps) != 0)
# --
taxa_before <- ntaxa(ps)
ps
# - remove taxa with Kingdom == NA -
ps <- phyloseq::subset_taxa(ps, !is.na(Kingdom))
ps
5 + 3
group_var <- "Group"
?estimateSizeFactors
gm_own
# generate a new phyloseq object that contains only taxa with at least one zero count in one of the samples
count_table <- t(as(otu_table(ps), "matrix")) # taxa are rows now
sum(rowSums(count_table == 0) > 0)
ps
ps2 <- prune_taxa(taxa = rowSums(count_table == 0) > 0, x = ps)
ps2
DES = phyloseq_to_deseq2(ps2, formula(paste("~", group_var)))
group_var <- "Country"
DES = phyloseq_to_deseq2(ps2, formula(paste("~", group_var)))
SS <- as(sample_data(ps), "data.frame")
View(SS)
str(SS)
table(SS$Country)
group_var
SS$Country <- factor(SS$Country, ordered = FALSE)
sample_data(ps) <- SS
ps2 <- prune_taxa(taxa = rowSums(count_table == 0) > 0, x = ps)
ps2
DES = phyloseq_to_deseq2(ps2, formula(paste("~", group_var)))
estimateSizeFactors(DES, type = "ratio")
body(gm_own)
ti <- c(10, 0, 10, 0, 10)
gm_own(ti)
gm_own(ti, zeros.count = FALSE)
ti <- c(100, 0, 100, 0, 100)
gm_own(ti, zeros.count = FALSE)
gm_own(ti, zeros.count = TRUE)
100^3
(1e6)^(1/5)
100/15.8489
GM_referenceSample <- apply(otu_table(ps2), 2, gm_own, zeros.count = FALSE)
GM_referenceSample_zerosCount <- apply(otu_table(ps2), 2, gm_own, zeros.count = TRUE)
SFs <- sizeFactors(estimateSizeFactors(DES, type = "ratio", geoMeans = GM_referenceSample))
SFs_zerosCount <- sizeFactors(estimateSizeFactors(DES, type = "ratio", geoMeans = GM_referenceSample_zerosCount))
SFs2 <- sizeFactors(estimateSizeFactors(DES, type = "poscounts"))
identical(SFs_zerosCount, SFs2) # TRUE
plot(SFs, SFs_zerosCount)
SFs
SFs_zerosCount
SFs_zerosCount-SFs
GM_referenceSample/GM_referenceSample_zerosCount
range(GM_referenceSample/GM_referenceSample_zerosCount)
GM_referenceSample <- apply(otu_table(ps2), 2, gm_own, zeros.count = FALSE)
GM_referenceSample_zerosCount <- apply(otu_table(ps2), 2, gm_own, zeros.count = TRUE)
range(GM_referenceSample/GM_referenceSample_zerosCount)
SFs <- sizeFactors(estimateSizeFactors(DES, type = "ratio", geoMeans = GM_referenceSample))
SFs_zerosCount <- sizeFactors(estimateSizeFactors(DES, type = "ratio", geoMeans = GM_referenceSample_zerosCount))
range(SFs/SFs_zerosCount)
# takes about a minute or two on my MAC:
SF_iterate <- sizeFactors(estimateSizeFactors(DES, type = "iterate"))
# GM_referenceSample is always equal or bigger than GM_referenceSample_zerosCount
range(GM_referenceSample/GM_referenceSample_zerosCount)
# I would therefore expect that all SFs (zeros.count = FALSE) would be smaller than SFs_zerosCount, but
range(SFs/SFs_zerosCount)
SFs/SFs_zerosCount
GM_referenceSample/GM_referenceSample_zerosCount
ps2
ps
length(GM_referenceSample))
length(GM_referenceSample)
# let's calculate ourselfs for samples 1 and 2
OUTT <- as(otu_table(ps2), "matrix")
# let's calculate ourselfs for samples 1 and 2
OTUT <- as(otu_table(ps2), "matrix")
dim(OTUT)
# let's calculate ourselfs for samples 1 and 2
OTUT <- t(as(otu_table(ps2), "matrix"))
dim(OTUT)
colnames(OTUT)[1:2]
OTUT <- OTUT[,1:2]
dim(OTUT)
OTUT_Ratios <- OTUT/GM_referenceSample
View(OTUT)
View(OTUT_Ratios)
View(OTUT)
OTUT_Ratios_zerosCount <- OTUT/GM_referenceSample_zerosCount
View(OTUT_Ratios_zerosCount)
View(OTUT_Ratios)
Diff <- OTUT_Ratios/OTUT_Ratios_zerosCount
View(Diff)
range(Diff)
range(Diff, na.rm = TRUE)
apply(OTUT_Ratios, 2, median)
apply(OTUT_Ratios[OTUT_Ratios > 0], 2, median) # would result in 0,
OTUT_Ratios[OTUT_Ratios > 0]
lapply(OTUT_Ratios, function(ratios){median(counts[counts>0])})
lapply(OTUT_Ratios, function(ratios){median(ratios[ratios>0])})
View(OTUT_Ratios)
lapply(as.data.frame(OTUT_Ratios), function(ratios){median(ratios[ratios>0])})
SFs[1:2]
?rpois
total <- 50/773
toral
50/773
lambda <- 50/773
rpois(7000, lambda = lambda)
sum(rpois(7000, lambda = lambda))
# - install packages -
# NB: all packages have to be installed, usually via install.packages()
# some packages you need to install via bioconductor, e.g.:
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
# --
# - load packages -
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
library(RColorBrewer)
library(pheatmap)
library(grid)
library(breakaway)
library(bookdown)
# library(coin) # only needed if using test_differential_abundance_WilcoxonsingleManiCoin
# - packaged from Mani's analysis that I could add if needed-
# library(cowplot)
# library(ade4)
# library(ggrepel)
# library(ggforce)
# library(kableExtra)
# library(bindrcpp)
# library(stringr)
# library(BiocParallel)
# library(microbiomeX)
# --
# - load your phyloseq object -
# NB: USER INPUTPS
name_phyloseq_rds <- "physeq_microdiab_ngt_Men.rds"
# NB: USER INPUT
datapath <- "./Example_phyloseq_objects"
# Test your input:
if(! file.exists(file.path(datapath, name_phyloseq_rds))){
stop("The given path/file to your phyloseq object does not exist.")
}
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
?prune_samples
rm(list = ls())
setwd("~/MarieCurie_Work/BackgroundKnowledge/MicrobiomeX2/HeatmapExample")
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
library(RColorBrewer)
library(pheatmap)
#library(grid)
#library(breakaway)
#library(bookdown)
# --
# - source functions -
functionpath <- "."
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
rm(list = ls())
# - load packages -
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
library(RColorBrewer)
library(pheatmap)
#library(grid)
#library(breakaway)
#library(bookdown)
# --
# - source functions -
functionpath <- "."
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
# --
# - load your phyloseq object -
name_phyloseq_rds <- "physeq_microdiab_ngt_Men.rds"
datapath <- "."
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
# - Define the group variable for sample comparisons -
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
if(! group_var %in% colnames(sample_data(ps))) {
stop("The given group_var is not a variable in the sample data of the loaded phyloseq object.")
}
group_var_levels <- c("IN", "DK") # defines the order of the groups in all plots. If set to NULL:
# - Define the group variable for sample comparisons -
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
group_var_levels <- c("IN", "DK") # defines the order of the groups in all plots. If set to NULL:
color_levels <- c(cbPalette[2], cbPalette[4]) # choose your preferred colors for each group in your group_var. If set to NULL:
names(color_levels) <- group_var_levels
ps
# - do a simple prevalence filtering to speed up the example -
prevalence <- 15
min_obs <- 0L
ps_filt <- phyloseq::filter_taxa(ps, function(x){(sum(x > min_obs) > (prevalence/100)*length(x))}, prune = TRUE)
ps_filt
# - do a simple prevalence filtering to speed up the example -
prevalence <- 20
min_obs <- 0L
ps_filt <- phyloseq::filter_taxa(ps, function(x){(sum(x > min_obs) > (prevalence/100)*length(x))}, prune = TRUE)
ps_filt
# - do a fisher prevalence test -
physeq_to_test <- ps_filt
diff_ab_df <- test_diffs_in_prevalence_single(physeq = physeq_to_test, group_var = group_var, compare = group_var_levels, p.adj.method = "fdr", minCount = 0L, symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
# -- catch the hits --
hit_list <- format_hit_table(diff_ab_df, p.adjust.threshold = 0.05, p.adjust.method = NULL)
taxa_hit_df <- hit_list[["hit_table"]]
# - define colors for heatmap -
significance_colors <- brewer.pal(4, "Reds")
significance_colors <- c(rev(significance_colors), "gray", "violet")
names(significance_colors) = c("****", "***", "**", "*", "ns", "?")
taxa_colors <- list("signi_adj" = significance_colors, "Phylum" = phylum_colors)
if (!is.null(shape)){
sample_colors <- list(color_levels, NA)
names(sample_colors) <- c(group_var, shape)
} else {
sample_colors <- list(color_levels)
names(sample_colors) <- group_var
}
shape <- "Gender"
if (!is.null(shape)){
sample_colors <- list(color_levels, NA)
names(sample_colors) <- c(group_var, shape)
} else {
sample_colors <- list(color_levels)
names(sample_colors) <- group_var
}
if (!is.null(shape)){
sample_colors <- list(color_levels, NA)
names(sample_colors) <- c(group_var, shape)
} else {
sample_colors <- list(color_levels)
names(sample_colors) <- group_var
}
# - get a more informative taxa annotation for the heatmap -
taxa_annotation <- taxa_hit_df$Annotation
sample_colors
taxa_colors
taxa_colors <- list("signi_adj" = significance_colors, "Phylum" = phylum_colors)
# - determine the phylum colors -
PhylaForColor <- check_phyla_distribution(ps_filt)
# --
#######################################
### FUNCTION: check_phyla_distribution#
#######################################
# NB: throws error if "Phylum" is not in colnames(tax_table(physeq))
# outputs a data.frame, summarising the taxa distribution over the different phyla.
## INPUT:
# physeq: physeq object
## OUTPUT:
# data.frame, summarising the taxa distribution over the different phyla.
# the Phyla are ordered so the Phylum with most counts (PC_of_counts) is on top, no of taxa is used to break ties in the ordering
# columns: PC stands for percentage,
# mean/median_taxa_sum are the mean/median of the taxa_sums (total counts over all samples) of the taxa in the respective phylum
# other columns should be clear
check_phyla_distribution <- function(physeq) {
if (phyloseq::taxa_are_rows(physeq)) {
physeq <- t(physeq)
}
df_ab_prev <- data.frame(Taxon_No = 1:ntaxa(physeq),
total_counts = taxa_sums(physeq),
prevalence = colSums(as(otu_table(physeq), "matrix") != 0))
df_ab_prev <- cbind(df_ab_prev, as.data.frame(unclass(tax_table(physeq))))
PhylaDistribution <- dplyr::summarise(group_by(df_ab_prev, Phylum),
taxa = n(),
PC_of_taxa = round(100*taxa/ntaxa(physeq),1),
PC_of_counts = round(100*sum(total_counts)/sum(otu_table(physeq)), 1),
PC_of_prevalence = round(100*sum(prevalence)/sum(otu_table(physeq) != 0), 1),
mean_taxa_sum = round(mean(total_counts)),
median_taxa_sum = round(median(total_counts)),
mean_prevalence_in_PC = round(100*mean(prevalence)/nsamples(physeq), 1)) %>%
arrange(desc(PC_of_counts), desc(taxa), desc(PC_of_prevalence))
PhylaDistribution
}
# --
rm(list = ls())
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
library(RColorBrewer)
library(pheatmap)
#library(grid)
#library(breakaway)
#library(bookdown)
# --
# - source functions -
functionpath <- "."
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
# --
# - load your phyloseq object -
name_phyloseq_rds <- "physeq_microdiab_ngt_Men.rds"
datapath <- "."
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
# --
# - Define the group variable for sample comparisons -
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
group_var_levels <- c("IN", "DK") # defines the order of the groups in all plots. If set to NULL:
color_levels <- c(cbPalette[2], cbPalette[4]) # choose your preferred colors for each group in your group_var. If set to NULL:
names(color_levels) <- group_var_levels
shape <- "Gender"
# --
# - do a simple prevalence filtering to speed up the example -
prevalence <- 20
min_obs <- 0L
ps_filt <- phyloseq::filter_taxa(ps, function(x){(sum(x > min_obs) > (prevalence/100)*length(x))}, prune = TRUE)
# --
# - determine the phylum colors -
PhylaForColor <- check_phyla_distribution(ps_filt)
if (nrow(PhylaForColor) < 16) {
phylum_colors <- make_color_vector(as.character(PhylaForColor$Phylum), QuantColors15)
} else {
phylum_colors <- make_color_vector(as.character(PhylaForColor$Phylum), c(QuantColors15, viridis(nrow(PhylaForColor)-15)))
}
phylum_colors
rm(list = ls())
# - load packages -
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
library(RColorBrewer)
library(pheatmap)
#library(grid)
#library(breakaway)
#library(bookdown)
# --
# - source functions -
functionpath <- "."
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
# --
# - load your phyloseq object -
name_phyloseq_rds <- "physeq_microdiab_ngt_Men.rds"
datapath <- "."
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
# --
# - Define the group variable for sample comparisons -
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
group_var_levels <- c("IN", "DK") # defines the order of the groups in all plots. If set to NULL:
color_levels <- c(cbPalette[2], cbPalette[4]) # choose your preferred colors for each group in your group_var. If set to NULL:
names(color_levels) <- group_var_levels
shape <- "Gender"
# --
# - do a simple prevalence filtering to speed up the example -
prevalence <- 20
min_obs <- 0L
ps_filt <- phyloseq::filter_taxa(ps, function(x){(sum(x > min_obs) > (prevalence/100)*length(x))}, prune = TRUE)
# --
# - determine the phylum colors -
PhylaForColor <- check_phyla_distribution(ps_filt)
if (nrow(PhylaForColor) < 16) {
phylum_colors <- make_color_vector(as.character(PhylaForColor$Phylum), QuantColors15)
} else {
phylum_colors <- make_color_vector(as.character(PhylaForColor$Phylum), c(QuantColors15, viridis(nrow(PhylaForColor)-15)))
}
# --
# - do a fisher prevalence test -
physeq_to_test <- ps_filt
diff_ab_df <- test_diffs_in_prevalence_single(physeq = physeq_to_test, group_var = group_var, compare = group_var_levels, p.adj.method = "fdr", minCount = 0L, symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
# --
# - catch the hits -
hit_list <- format_hit_table(diff_ab_df, p.adjust.threshold = 0.05, p.adjust.method = NULL)
taxa_hit_df <- hit_list[["hit_table"]]
# --
# - define colors for heatmap -
significance_colors <- brewer.pal(4, "Reds")
significance_colors <- c(rev(significance_colors), "gray", "violet")
names(significance_colors) = c("****", "***", "**", "*", "ns", "?")
taxa_colors <- list("signi_adj" = significance_colors, "Phylum" = phylum_colors)
if (!is.null(shape)){
sample_colors <- list(color_levels, NA)
names(sample_colors) <- c(group_var, shape)
} else {
sample_colors <- list(color_levels)
names(sample_colors) <- group_var
}
# --
# - get a more informative taxa annotation for the heatmap -
taxa_annotation <- taxa_hit_df$Annotation
# --
# - do the heatmap -
p <- plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = head(taxa_hit_df, 40), taxa_colors = taxa_colors,
taxa_annotation = head(taxa_annotation, 40), max_abundance_for_color = .08, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = TRUE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 14,
fontsize_row = 12, fontsize_col = 12, fontsize_number = 12)
head(taxa_hit_df, 40)
head(taxa_annotation, 40)
# - do the heatmap -
p <- plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = head(taxa_hit_df, 40), taxa_colors = taxa_colors,
taxa_annotation = head(taxa_annotation, 40), max_abundance_for_color = NULL, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = TRUE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 14,
fontsize_row = 12, fontsize_col = 12, fontsize_number = 12)
rm(list = ls())
rm(list = ls())
