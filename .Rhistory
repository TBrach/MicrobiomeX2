# biocLite("phyloseq")
# --
# - load packages -
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
# - packaged from Mani's analysis that I could add -
# library(cowplot)
# library(coin)
# library(ade4)
# library(ggrepel)
# library(ggforce)
# library(bookdown)
# library(kableExtra)
# library(RColorBrewer)
# library(bindrcpp)
# library(stringr)
# library(pheatmap)
# library(BiocParallel)
# library(microbiomeX)
# --
# - define cbPalette and QuantColors15 schemes -
# R color blind palette is used for group comparisons (unless more than 8 groups)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") # ref: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# QuantColors15 is used for phyla comparisons as long as there are < 15 phyla, each color is easy to distinguish from the two colors surrounding it
tol15rainbow=c("#114477", "#4477AA", "#77AADD", "#117755", "#44AA88", "#99CCBB", "#777711", "#AAAA44", "#DDDD77", "#771111", "#AA4444", "#DD7777", "#771144", "#AA4477", "#DD77AA") # ref: https://tradeblotter.wordpress.com/2013/02/28/the-paul-tol-21-color-salute/
QuantColors15 <- tol15rainbow[c(1, 12, 4, 7, 13, 2, 11, 5, 8, 14, 3, 10, 6, 9, 15)]
# --
# - source all functions -
functionpath <- "./Functions"
source(file.path(functionpath, "000_helper_functions.R"))
source(file.path(functionpath, "010_explore_ps_functions.R"))
source(file.path(functionpath, "020_preprocess_filtering_functions.R"))
source(file.path(functionpath, "030_alpha_diversity_functions.R"))
source(file.path(functionpath, "040_beta_diversity_functions.R"))
source(file.path(functionpath, "050_diff_abundance_functions.R"))
source(file.path(functionpath, "060_phylum_analysis_functions.R"))
source(file.path(functionpath, "n_050_diff_abundance_functions.R"))
# - load your phyloseq object -
# NB: USER INPUT
name_phyloseq_rds <- "physeq_Men.rds"
# NB: USER INPUT
datapath <- "./Example_phyloseq_objects"
# Test your input:
if(! file.exists(file.path(datapath, name_phyloseq_rds))){
stop("The given path/file to your phyloseq object does not exist.")
}
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
# --
# - Define the group variable for sample comparisons -
# NB: USER INPUT
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
# Test your input:
if(! group_var %in% colnames(sample_data(ps))) {
stop("The given group_var is not a variable in the sample data of the loaded phyloseq object.")
}
# --
# - Define the two levels in your group_var that you want to compare -
# NB: USER INPUT
group_var_levels <- c("DK", "IN") # defines the order of the groups in all plots. If set to NULL:
if (is.null(group_var_levels)) {
group_var_levels <- unique(sample_data(ps)[[group_var]])
}
# Test your input:
if (!all(group_var_levels %in% unique(sample_data(ps)[[group_var]]))) {
stop("Not all given group_var_levels are actually levels in group_var column.")
}
if (length(group_var_levels) != 2) {
stop("Sorry, for MicrobiomeX2 group_var_levels needs to consist of exactly 2 levels.")
}
# --
# - Set the colors representing the groups in your group_var -
# NB: USER INPUT
color_levels <- c(cbPalette[2], cbPalette[4]) # choose your preferred colors for each group in your group_var. If set to NULL:
if (is.null(color_levels)) {
color_levels <- c(cbPalette[2], cbPalette[4])
}
# Test your input:
if (length(color_levels) != length(group_var_levels)) {
stop("The number of colors in the given color_levels did not fit to group_var_levels.")
}
if (!all(areColors(color_levels))) {
stop("Stopped because not all entries in color_levels were valid R colors.")
}
names(color_levels) <- group_var_levels
# --
# - optional: use another variable in sample_data(ps) as shape in some of the plots -
# NB: user input
shape <- "Gender"
# Test your input:
if (!is.null(shape)) {
if (! shape %in% colnames(sample_data(ps))) {
stop("The given shape is not a variable in the sample data of the loaded phyloseq object.")
}
}
# --
# - Set the taxonomic_level for the analysis -
# NB: You can choose all levels within colnames(tax_table(ps))
# phyloseq::taxglom to that level will be used.
# if you set taxonomic_level to NULL, all taxa will be analysed (i.e. strain/species/ASV level analysis)
# NB user input
taxonomic_level <- "Genus"
# NB user input
phylum_NA_removal <- "no" # if yes you remove all taxa for which Phylum = NA before the analyses
# Test your input:
if (!is.null(taxonomic_level) && !(taxonomic_level %in% colnames(tax_table(ps)))){
stop("You provided a taxonomic_level that is not present in the tax_table of the loaded phyloseq object.")
}
# --
# - Filtering inputs -
# NB: user input
prevalence <- 0 # in percent, for prevalence filtering of taxa
# NB: user input
min_obs <- 0L # in counts, a taxon will be considered present (for prevalence) if count > min_obs
# NB: user input
taxa_sums_quantile <- 100 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence filter
# Test filtering inputs and set invalid inputs to defaults
if (!is.numeric(prevalence) || prevalence < 0 || prevalence > 100) {
prevalence <- 5
}
if (!is.numeric(min_obs)) {
min_obs <- 0L
}
if (!is.numeric(taxa_sums_quantile) || taxa_sums_quantile < 0 || taxa_sums_quantile > 100) {
taxa_sums_quantile <- 0
}
# --
# - Alpha diversity and rarifaction inputs -
# NB: user input
alpha_div_measures <- c("Observed", "Shannon") # ?phyloseq::estimate_richness: may include c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher")
# NB: user input
seed <- 1234 # for reproducibility of rarefaction curves
# NB: user input
step_size <- 200 # steps in sample_sums for rarefaction curves
# NB: user input
rare_level <- NULL # sample_sums/total_counts level to which rarefaction is perforemd, if NULL, min(sample_sums(ps)) is used!
# NB: user input
rare_max_total <- NULL # maximal sample_sums/total_counts value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# Test alpha-diversity inputs and set invalid inputs to defaults
if (! all(alpha_div_measures %in% c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher"))) {
alpha_div_measures <- c("Observed", "Shannon")
}
if (!is.numeric(seed)) {
seed <- 1234
}
if (!is.numeric(step_size)) {
step_size <- 200
}
if (!is.numeric(rare_level)) {
rare_level <- NULL # will be changed to min(sample_sums(ps))
}
if (!is.numeric(rare_max_total)) {
rare_max_total <- NULL # quantile(sample_sums(ps), probs = .25)
}
# --
# - beta diversity inputs -
dist_methods <- c("jsd") # otions: see unlist(phyloseq::distanceMethodList)
coord_cor <- FALSE # adjustment of the axis representation in ordination plots
# Test beta diversity inputs and set invalid inputs to defaults
if (! all(dist_methods %in% unlist(phyloseq::distanceMethodList))) {
dist_methods <- c("jsd")
}
if (! is.logical(coord_cor)){
coord_cor <- FALSE
}
# --
# - record used R and package versions in a data frame -
PackageVersions <- data.frame(R = version$version.string,
phyloseq = packageVersion("phyloseq"),
dada2 = packageVersion("dada2"),
vegan = packageVersion("vegan"),
ggplot2 = packageVersion("ggplot2"),
dplyr = packageVersion("dplyr"),
tidyr = packageVersion("tidyr"),
gridExtra = packageVersion("gridExtra"),
xtable = packageVersion("xtable"),
viridis = packageVersion("viridis"),
scales = packageVersion("scales"),
ggthemes = packageVersion("ggthemes"),
DESeq2 = packageVersion("DESeq2"),
ggpubr = packageVersion("ggpubr"))
for (i in 1:ncol(PackageVersions)){
PackageVersions[,i] <- as.character(PackageVersions[,i])
}
PackageVersions_l <- tidyr::gather(PackageVersions, key = Package, value = Version)
PackageVersions_l[2:nrow(PackageVersions_l), ] <- dplyr::arrange(PackageVersions_l[2:nrow(PackageVersions_l), ], Package)
# --
# - record given input parameters in a data frame -
Inputs_phyloseqAnalysis <- list(taxonomic_level = taxonomic_level,
phylum_NA_removal = phylum_NA_removal,
group_var = group_var,
group_var_levels = group_var_levels,
shape = shape,
prevalence = prevalence,
min_obs = min_obs,
taxa_sums_quantile = taxa_sums_quantile,
alpha_div_measures = alpha_div_measures,
seed = seed,
step_size = step_size,
rare_level = rare_level,
rare_max_total = rare_max_total,
dist_methods = dist_methods,
coord_cor = coord_cor)
Inputs_phyloseqAnalysis <- data.frame(Argument = names(Inputs_phyloseqAnalysis),
Value = sapply(Inputs_phyloseqAnalysis, function(x){
if (is.null(x)){
"NULL"
} else if (length(x) > 7) {
"long entry"
} else if (length(x) > 1 && length(x) < 8){
paste(x, collapse = "; ")
} else {
as.character(x)
}
}
))
rownames(Inputs_phyloseqAnalysis) <- NULL
# --
knitr::kable(PackageVersions_l)
knitr::kable(Inputs_phyloseqAnalysis)
# - remove taxa with Phylum == NA -
ps <- phyloseq::subset_taxa(ps, taxa_sums(ps) != 0)
Phyla <- check_phyla_distribution(ps)
knitr::kable(Phyla, caption = "Phyla Distribution")
assignment_distribution <- get_assignemnt_distribution(ps)
knitr::kable(assignment_distribution, caption = "Taxonomic annotation statistics of OTUs")
rm(assignment_distribution)
assign_vs_ab <- check_assignment_vs_abundance(ps)
assign_vs_prev <- check_assignment_vs_prevalence(ps)
grid.arrange(assign_vs_prev[[2]], assign_vs_ab[[2]], nrow = 2)
# - remove taxa with Phylum == NA -
if (phylum_NA_removal == "yes"){
ps <- phyloseq::subset_taxa(ps, !is.na(Phylum))
}
# --
TrrList <- plot_correlations_abundance_prev_sparsity(physeq = ps, col = "Phylum")
grid.arrange(TrrList[[3]], TrrList[[4]], ncol = 2)
# - caluclation of Size Factors -
SFs <- calc_SFs(physeq = ps)
# --
# - perform tax_glom -
if (!is.null(taxonomic_level)){
ps <- phyloseq::tax_glom(ps, taxrank = taxonomic_level, NArm = FALSE)
} else {
taxonomic_level <- "Species" # for later labelling in plots, even though in this case it is ASV level analysis but there is no strain taxonomy in taxa_table
}
# --
TrList <- plot_ab_pev_distributions(ps, prevalence = prevalence)
grid.arrange(TrList[[1]], TrList[[2]], TrList[[3]] + scale_y_log10(), TrList[[4]], nrow = 4)
SampleSumList <- boxplot_sampleSums(physeq = ps, group_var = group_var, color_levels = color_levels, shape = shape, test = "t.test", p_adjust_method = "fdr",
symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
SampleSumList[["Tr"]]
# - filtering  -
# NB: SFs were already calculated in exploratory analysis before tax_glom!
library_size_adjust_list <- simply_adjust_LS(ps, SFs = SFs)
ps_tca <- library_size_adjust_list[[1]] # tca: total counts adjusted
ps_tca_filt <- phyloseq::filter_taxa(ps_tca, function(x){
(sum(x > min_obs) > (prevalence/100)*length(x)) ||
(sum(x) > quantile(taxa_sums(ps_tca), probs = taxa_sums_quantile/100))
}, prune = TRUE)
ps_filt <- phyloseq::prune_taxa(taxa_names(ps_tca_filt), ps) # you need ps_filt for DESeq2Apply_physeq
# --
# - Generate a visual overview of the filtering step -
filterList <- visualize_filtering(physeq = ps_tca, prevalence = prevalence, taxa_sums_quantile = taxa_sums_quantile)
# --
# - prune all physeq objects so they only contain samples that are part of group_var_levels -
keepSamples <- sample_names(ps)[sample_data(ps)[[group_var]] %in% group_var_levels]
physeq_list <- list(ps = ps, ps_filt = ps_filt, ps_tca = ps_tca, ps_tca_filt =  ps_tca_filt)
for (i in 1:length(physeq_list)){
assign(names(physeq_list)[i], prune_samples(samples = keepSamples, physeq_list[[i]]))
}
rm(physeq_list, keepSamples)
# --
# - remove taxa that are now not presenti in a single sample -
keepTaxa <- taxa_names(ps)[taxa_sums(ps) != 0]
physeq_list <- list(ps = ps, ps_filt = ps_filt, ps_tca = ps_tca, ps_tca_filt =  ps_tca_filt)
for (i in 1:length(physeq_list)){
assign(names(physeq_list)[i], prune_taxa(taxa = keepTaxa, physeq_list[[i]]))
}
rm(physeq_list, keepTaxa)
# --
ps_filt_ra <- phyloseq::transform_sample_counts(ps_filt, function(x){x/sum(x)})
# - generate barplot representations of counts before and after filtering -
bar_plot_ps_vs_ps_tca <- plot_sample_bars_compare(physeq = ps, physeq2 = ps_tca, x = "Sample", y = "Abundance", group_var = group_var, color_levels = color_levels, fill = "Phylum", color_sample_names = TRUE)
# --
SFs <- SFs[names(SFs) %in% sample_names(ps)]
# - Plots on the question: Were the size factors different between the groups -
SFList <- plot_sizeFactors(physeq = ps, SFs = SFs, group_var = group_var, color_levels = color_levels, shape = shape, test = "t.test", p_adjust_method = "fdr", symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
# --
filterList[[1]]
bar_plot_ps_vs_ps_tca
dist_methods
# - calculate the beta diversity distances -
dist_list <- calc_beta_div_distances(ps_filt_ra, dist_methods) # produces objects of class "dist"
# - add Permutational Multivariate Analysis of Variance Using Distance Matrix and vegan::adonis -
adonis_list <- lapply(dist_list, function(dist_obj){
loop_vegan_adonis(dist_obj = dist_obj, group_fac = sample_data(ps_filt_ra)[[group_var]])
})
adonis_list
# - construct ordination plots -
pcoas <- calc_ordination_from_distances(ps_filt_ra, dist_list = dist_list, color_levels = color_levels, ordination_type = "PCoA", group_var = group_var, shape = shape, coord_cor = coord_cor)
pcoas[["ordination_Tr_samples"]]
# - choose the physeq object to run the test on -
physeq_to_test <- ps_filt_ra
# - run the diff_abundance test -
diff_ab_df <- test_diffs_in_prevalence_single(physeq = physeq_to_test, group_var = group_var, compare = group_var_levels, p.adj.method = "fdr", minCount = 0L)
# - catch the hits -
hit_list <- format_hit_table(diff_ab_df, p.adjust.threshold = 0.05, p.adjust.method = NULL)
taxa_hit_df <- hit_list[["hit_table"]]
# - define colors for heatmap -
significance_colors <- brewer.pal(4, "Reds")
significance_colors <- c(rev(significance_colors), "gray")
names(significance_colors) = c("****", "***", "**", "*", "ns")
taxa_colors <- list("signi_adj" = significance_colors, "Phylum" = phylum_colors)
if (!is.null(shape)){
sample_colors <- list(color_levels, NA)
names(sample_colors) <- c(group_var, shape)
} else {
sample_colors <- list(color_levels)
names(sample_colors) <- group_var
}
# - get a more informative taxa annotation of the hits -
taxa_annotation <- get_taxon_names(taxa_hit_df)
library(RColorBrewer)
library(pheatmap)
# - record used R and package versions in a data frame -
PackageVersions <- data.frame(R = version$version.string,
phyloseq = packageVersion("phyloseq"),
dada2 = packageVersion("dada2"),
vegan = packageVersion("vegan"),
ggplot2 = packageVersion("ggplot2"),
dplyr = packageVersion("dplyr"),
tidyr = packageVersion("tidyr"),
gridExtra = packageVersion("gridExtra"),
xtable = packageVersion("xtable"),
viridis = packageVersion("viridis"),
scales = packageVersion("scales"),
ggthemes = packageVersion("ggthemes"),
DESeq2 = packageVersion("DESeq2"),
ggpubr = packageVersion("ggpubr"),
RColorBrewer = packageVersion("RColorBrewer"),
pheatmap = packageVersion("pheatmap"))
for (i in 1:ncol(PackageVersions)){
PackageVersions[,i] <- as.character(PackageVersions[,i])
}
PackageVersions_l <- tidyr::gather(PackageVersions, key = Package, value = Version)
PackageVersions_l[2:nrow(PackageVersions_l), ] <- dplyr::arrange(PackageVersions_l[2:nrow(PackageVersions_l), ], Package)
# --
# - record given input parameters in a data frame -
Inputs_phyloseqAnalysis <- list(taxonomic_level = taxonomic_level,
phylum_NA_removal = phylum_NA_removal,
group_var = group_var,
group_var_levels = group_var_levels,
shape = shape,
prevalence = prevalence,
min_obs = min_obs,
taxa_sums_quantile = taxa_sums_quantile,
alpha_div_measures = alpha_div_measures,
seed = seed,
step_size = step_size,
rare_level = rare_level,
rare_max_total = rare_max_total,
dist_methods = dist_methods,
coord_cor = coord_cor)
Inputs_phyloseqAnalysis <- data.frame(Argument = names(Inputs_phyloseqAnalysis),
Value = sapply(Inputs_phyloseqAnalysis, function(x){
if (is.null(x)){
"NULL"
} else if (length(x) > 7) {
"long entry"
} else if (length(x) > 1 && length(x) < 8){
paste(x, collapse = "; ")
} else {
as.character(x)
}
}
))
rownames(Inputs_phyloseqAnalysis) <- NULL
# --
knitr::kable(PackageVersions_l)
# - record used R and package versions in a data frame -
PackageVersions <- data.frame(R = version$version.string,
phyloseq = packageVersion("phyloseq"),
dada2 = packageVersion("dada2"),
vegan = packageVersion("vegan"),
ggplot2 = packageVersion("ggplot2"),
dplyr = packageVersion("dplyr"),
tidyr = packageVersion("tidyr"),
gridExtra = packageVersion("gridExtra"),
xtable = packageVersion("xtable"),
viridis = packageVersion("viridis"),
scales = packageVersion("scales"),
ggthemes = packageVersion("ggthemes"),
DESeq2 = packageVersion("DESeq2"),
ggpubr = packageVersion("ggpubr"),
RColorBrewer = packageVersion("RColorBrewer"),
pheatmap = packageVersion("pheatmap"))
for (i in 1:ncol(PackageVersions)){
PackageVersions[,i] <- as.character(PackageVersions[,i])
}
PackageVersions_l <- tidyr::gather(PackageVersions, key = Package, value = Version)
PackageVersions_l[2:nrow(PackageVersions_l), ] <- dplyr::arrange(PackageVersions_l[2:nrow(PackageVersions_l), ], Package)
PackageVersions_l
# - define colors for heatmap -
significance_colors <- brewer.pal(4, "Reds")
significance_colors <- c(rev(significance_colors), "gray")
names(significance_colors) = c("****", "***", "**", "*", "ns")
taxa_colors <- list("signi_adj" = significance_colors, "Phylum" = phylum_colors)
if (!is.null(shape)){
sample_colors <- list(color_levels, NA)
names(sample_colors) <- c(group_var, shape)
} else {
sample_colors <- list(color_levels)
names(sample_colors) <- group_var
}
Phyla <- check_phyla_distribution(ps_filt)
Phyla$Phylum <- factor(Phyla$Phylum, levels = unique(Phyla$Phylum), ordered = T)
phylum_colors <- assign_default_colors(Phyla, "Phylum")
taxa_colors <- list("signi_adj" = significance_colors, "Phylum" = phylum_colors)
if (!is.null(shape)){
sample_colors <- list(color_levels, NA)
names(sample_colors) <- c(group_var, shape)
} else {
sample_colors <- list(color_levels)
names(sample_colors) <- group_var
}
# - get a more informative taxa annotation of the hits -
taxa_annotation <- get_taxon_names(taxa_hit_df)
p <- plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = taxa_hit_df, taxa_colors = taxa_colors1,
taxa_annotation = taxa_annotation, max_abundance_for_color = .08, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = FALSE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 10,
fontsize_row = 6, fontsize_col = 6, fontsize_number = 6, filename = NA, drop_levels = TRUE)
p <- plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = taxa_hit_df, taxa_colors = taxa_colors,
taxa_annotation = taxa_annotation, max_abundance_for_color = .08, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = FALSE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 10,
fontsize_row = 6, fontsize_col = 6, fontsize_number = 6, filename = NA, drop_levels = TRUE)
?pheatmap
p <- plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = taxa_hit_df, taxa_colors = taxa_colors,
taxa_annotation = taxa_annotation, max_abundance_for_color = .08, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = FALSE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 10,
fontsize_row = 6, fontsize_col = 6, fontsize_number = 6, filename = "./superheatmap.pdf", width = 7, height = 10)
getwd()
ls
dir()
pdf(file = "heatmapl.pdf", width = 5, height = 10)
plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = taxa_hit_df, taxa_colors = taxa_colors,
taxa_annotation = taxa_annotation, max_abundance_for_color = .08, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = FALSE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 10,
fontsize_row = 6, fontsize_col = 6, fontsize_number = 6)
dev.off()
hit_list[[2]]
knitr::kable(taxa_hit_df)
head(taxa_hit_df, 40)
head(taxa_hit_df[1:10,], 40)
plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = head(taxa_hit_df, 40), taxa_colors = taxa_colors,
taxa_annotation = taxa_annotation, max_abundance_for_color = .08, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = FALSE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 10,
fontsize_row = 6, fontsize_col = 6, fontsize_number = 6)
plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = head(taxa_hit_df, 40), taxa_colors = taxa_colors,
taxa_annotation = head(taxa_annotation, 40), max_abundance_for_color = .08, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = FALSE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 10,
fontsize_row = 6, fontsize_col = 6, fontsize_number = 6)
library(grid)
p <- plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = head(taxa_hit_df, 40), taxa_colors = taxa_colors,
taxa_annotation = head(taxa_annotation, 40), max_abundance_for_color = .08, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = FALSE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 10,
fontsize_row = 6, fontsize_col = 6, fontsize_number = 6)
p <- plot_heatmap_physeq(physeq_to_test, sample_colors = sample_colors, taxa_info_df = head(taxa_hit_df, 40), taxa_colors = taxa_colors,
taxa_annotation = head(taxa_annotation, 40), max_abundance_for_color = .08, gradient_steps = c(0.15, 0.3, 0.45, 1),
zero_color = "gray", color_function = viridis, color_steps_bw_markers = 10, log_transform = FALSE, drop_color_levels = TRUE,
border_color = NA,
cluster_cols = FALSE, cluster_rows = FALSE, show_rownames = TRUE, show_colnames = FALSE, annotation_names_row = FALSE,
annotation_names_col = FALSE, annotation_legend = TRUE, legend = TRUE, font_size = 10,
fontsize_row = 6, fontsize_col = 6, fontsize_number = 6)
pdf(file = "heatmap.pdf", width = 7, height = 10)
grid::grid.newpage()
grid::grid.draw(p$gtable)
dev.off()
library(shiny); runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
rm(list = ls())
