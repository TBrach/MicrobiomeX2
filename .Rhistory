mdf <- phyloseq::psmelt(physeq)
# order samples according to levels
LookUpDF <- data.frame(Sample = sample_names(physeq), Group = sample_data(physeq)[[group_var]])
LookUpDF <- LookUpDF[order(match(LookUpDF$Group, levels(LookUpDF$Group))), ]
mdf$Sample <- factor(mdf$Sample, levels = LookUpDF$Sample, ordered = TRUE)
# order fill levels according to abundance over all samples
mdf[, fill] <- as.character(mdf[, fill])
mdf[is.na(mdf[, fill]), fill] <- "NA"
sums <- group_by_(mdf, fill) %>% summarise(sum_abundance = sum(Abundance)) %>% arrange(sum_abundance)
mdf[, fill] <- factor(mdf[, fill], levels = as.character(sums[[1]]), ordered = TRUE)
# - define names of x axis using color_levels (which must be a named character vector) -
colxaxis <- color_levels[LookUpDF$Group]
if (is.null(col_vec)){
if (length(levels(mdf[, fill])) <= 15) {
fill_colors <- make_color_vector(mdf[, fill], rev(QuantColors15[1:length(levels(mdf[, fill]))]))
} else {
fill_colors <- make_color_vector(mdf[, fill], viridis(length(levels(mdf[, fill]))))
}
} else {
fill_colors <- col_vec
}
x
View(mdf)
mdf$Sample
Tr <- ggplot(mdf, aes_string(x = x, y = y, fill = fill))
Tr <- Tr +
geom_bar(stat = "identity", position = "stack") +
theme_bw() +
scale_fill_manual(values = fill_colors) +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0, colour = colxaxis))
if (!is.null(facet_grid)) {
formulation <- as.formula(paste("~ ", facet_grid, sep = ""))
Tr <- Tr + facet_grid(formulation)
}
Tr
dim(mdf)
# - sort samples again based on Firmicutes -
FirmSummary <- group_by(mdf, Sample, Phylum) %>% summarise(Abundance = Abundance[1])
FrimSummary
FirmSummary
# - sort samples again based on Firmicutes -
FirmSummary <- filter(mdf, Phylum == "Firmicutes")
FirmSummary
dim(FirmSummary)
View(FirmSummary)
# - sort samples again based on Firmicutes -
FirmSummary <- filter(mdf, Phylum == "Firmicutes") %>% group_by_("Sample", group_var) %>% summarise(Abundance = Abundance[1])
View(FirmSummary)
# - sort samples again based on Firmicutes -
FirmSummary <- filter(mdf, Phylum == "Firmicutes")
View(FirmSummary)
FirmOrdered <- group_by_("group_var") %>% arrange(Abundance)
FirmOrdered <- group_by_(FirmSummary, "group_var") %>% arrange(Abundance)
FirmOrdered <- group_by_(FirmSummary, group_var) %>% arrange(Abundance)
View(FirmOrdered)
# - sort samples again based on Firmicutes -
FirmSummary <- filter(mdf, Phylum == "Firmicutes")
FirmOrdered <- group_by(FirmSummary, group_var) %>% arrange(Abundance)
# - sort samples again based on Firmicutes -
FirmSummary <- filter(mdf, Phylum == "Firmicutes")
FirmOrdered <- group_by(FirmSummary, group_var) %>% arrange(Abundance)
# - sort samples again based on Firmicutes -
FirmSummary <- filter(mdf, Phylum == "Firmicutes")
FirmOrdered <- group_by_(FirmSummary, group_var) %>% arrange(Abundance)
# - sort samples again based on Firmicutes -
FirmSummary <- filter(mdf, Phylum == "Firmicutes") %>% arrange(Abundance)
View(FirmSummary)
mdf$Sample <- factor(mdf$Sample, levels = FirmSummary$Sample, ordered = TRUE)
Tr <- ggplot(mdf, aes_string(x = x, y = y, fill = fill))
Tr <- Tr +
geom_bar(stat = "identity", position = "stack") +
theme_bw() +
scale_fill_manual(values = fill_colors) +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0, colour = colxaxis))
Tr
rm(list = ls())
# - install packages -
# NB: all packages have to be installed, usually via install.packages()
# some packages you need to install via bioconductor, e.g.:
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
# --
# - load packages -
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
library(RColorBrewer)
library(pheatmap)
library(grid)
library(breakaway)
library(bookdown)
# library(coin) # only needed if using test_differential_abundance_WilcoxonsingleManiCoin
# - packaged from Mani's analysis that I could add if needed-
# library(cowplot)
# library(ade4)
# library(ggrepel)
# library(ggforce)
# library(kableExtra)
# library(bindrcpp)
# library(stringr)
# library(BiocParallel)
# library(microbiomeX)
# --
# - source all functions -
functionpath <- "./Functions"
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_010_explore_ps_functions.R"))
source(file.path(functionpath, "_n_020_alpha_diversity_functions.R"))
source(file.path(functionpath, "_n_030_preprocess_filtering_functions.R"))
source(file.path(functionpath, "_n_040_beta_diversity_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
source(file.path(functionpath, "_n_060_phylum_analysis_functions.R"))
# --
# - load your phyloseq object -
# NB: USER INPUTPS
name_phyloseq_rds <- "physeq_microdiab_ngt_men_Hol.rds"
# NB: USER INPUT
datapath <- "./Example_phyloseq_objects"
# Test your input:
if(! file.exists(file.path(datapath, name_phyloseq_rds))){
stop("The given path/file to your phyloseq object does not exist.")
}
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
# --
# - Define the group variable for sample comparisons -
# NB: USER INPUT
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
# Test your input:
if(! group_var %in% colnames(sample_data(ps))) {
stop("The given group_var is not a variable in the sample data of the loaded phyloseq object.")
}
# --
# - Define the two levels in your group_var that you want to compare -
# NB: USER INPUT
group_var_levels <- c("IN", "DK") # defines the order of the groups in all plots. If set to NULL:
if (is.null(group_var_levels)) {
group_var_levels <- unique(sample_data(ps)[[group_var]])
}
# Test your input:
if (!all(group_var_levels %in% unique(sample_data(ps)[[group_var]]))) {
stop("Not all given group_var_levels are actually levels in group_var column.")
}
if (length(group_var_levels) != 2) {
stop("Sorry, for MicrobiomeX2 group_var_levels needs to consist of exactly 2 levels.")
}
# make sure sample_data(ps) is a factor (not totally necessary but in case there is no ordering in one of the functions)
sample_data(ps)[[group_var]] <- factor(sample_data(ps)[[group_var]], levels = c(group_var_levels, setdiff(unique(sample_data(ps)[[group_var]]), group_var_levels)), ordered = TRUE)
# --
# - Set the colors representing the groups in your group_var_levels -
# NB: so also color_levels must consist of exactly two colors
# NB: USER INPUT
color_levels <- c(cbPalette[2], cbPalette[4]) # choose your preferred colors for each group in your group_var. If set to NULL:
if (is.null(color_levels)) {
color_levels <- c(cbPalette[2], cbPalette[4])
}
# Test your input:
if (length(color_levels) != length(group_var_levels)) {
stop("The number of colors in the given color_levels did not fit to group_var_levels.")
}
if (!all(areColors(color_levels))) {
stop("Stopped because not all entries in color_levels were valid R colors.")
}
names(color_levels) <- group_var_levels
# --
# - optional: use another variable in sample_data(ps) as shape in some of the plots -
# NB: user input
shape <- "Gender"
# Test your input:
if (!is.null(shape)) {
if (! shape %in% colnames(sample_data(ps))) {
stop("The given shape is not a variable in the sample data of the loaded phyloseq object.")
}
}
# --
# - Set the taxonomic_level for the analysis -
# NB: You can choose all levels within colnames(tax_table(ps))
# phyloseq::taxglom will be used to adjust the phyloseq object to the chosen taxonomic_level.
# if you set taxonomic_level to NULL, all taxa will be analysed (i.e. strain/species/ASV level analysis)
# NB user input
taxonomic_level <- "Species"
# NB user input
phylum_NA_removal <- "no" # if yes you remove all taxa for which Phylum = NA before the analyses
# Test your input:
if (!is.null(taxonomic_level) && !(taxonomic_level %in% colnames(tax_table(ps)))){
stop("You provided a taxonomic_level that is not present in the tax_table of the loaded phyloseq object.")
}
# --
# - Filtering inputs -
# NB: user input
prevalence <- 0 # in percent, for prevalence filtering of taxa
# NB: user input
min_obs <- 0L # in counts, a taxon will be considered present (for prevalence) if count > min_obs
# NB: user input
taxa_sums_quantile <- 100 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence filter
# Test filtering inputs and set invalid inputs to defaults
if (!is.numeric(prevalence) || prevalence < 0 || prevalence > 100) {
prevalence <- 0
}
if (!is.numeric(min_obs)) {
min_obs <- 0L
}
if (!is.numeric(taxa_sums_quantile) || taxa_sums_quantile < 0 || taxa_sums_quantile > 100) {
taxa_sums_quantile <- 100
}
# --
# - Alpha diversity and rarifaction inputs -
# NB: user input
alpha_div_measures <- c("Observed", "Shannon") # ?phyloseq::estimate_richness: may include c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher")
# NB: user input
seed <- 1234 # for reproducibility of rarefaction curves
# NB: user input
step_size <- 200 # steps in sample_sums for rarefaction curves
# NB: user input
rare_level <- NULL # sample_sums/total_counts level to which rarefaction is perforemd, if NULL, min(sample_sums(ps)) is used!
# NB: user input
rare_max_total <- NULL # maximal sample_sums/total_counts value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# Test alpha-diversity inputs and set invalid inputs to defaults
if (! all(alpha_div_measures %in% c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher"))) {
alpha_div_measures <- c("Observed", "Shannon")
}
if (!is.numeric(seed)) {
seed <- 1234
}
if (!is.numeric(step_size)) {
step_size <- 200
}
if (!is.numeric(rare_level)) {
rare_level <- NULL # will be changed to min(sample_sums(ps))
}
if (!is.numeric(rare_max_total)) {
rare_max_total <- NULL # quantile(sample_sums(ps), probs = .25)
}
# --
# - beta diversity inputs -
dist_methods <- c("bray") # otions: see unlist(phyloseq::distanceMethodList)
coord_cor <- FALSE # adjustment of the axis representation in ordination plots
# Test beta diversity inputs and set invalid inputs to defaults
if (! all(dist_methods %in% unlist(phyloseq::distanceMethodList))) {
dist_methods <- c("bray")
}
if (! is.logical(coord_cor)){
coord_cor <- FALSE
}
# --
# - remove taxa with Phylum == NA -
ps <- phyloseq::subset_taxa(ps, taxa_sums(ps) != 0)
# --
taxa_before <- ntaxa(ps)
# - remove taxa with Phylum == NA -
if (phylum_NA_removal == "yes"){
ps <- phyloseq::subset_taxa(ps, !is.na(Phylum))
}
# --
# - caluclation of Size Factors -
SFs <- calc_SFs(physeq = ps)
# - generate library_size adjusted ps object -
library_size_adjust_list <- simply_adjust_LS(ps, SFs = SFs)
ps_tca <- library_size_adjust_list[[1]]
# --
Phyla <- check_phyla_distribution(ps_tca)
# - Define here phylum colors for later plots based on the phyla distribution
phylum_colors <- make_color_vector(as.character(Phyla$Phylum), QuantColors15)
if (taxonomic_level != "Phylum"){
ps <- phyloseq::tax_glom(ps, taxrank = "Phylum", NArm = FALSE)
taxonomic_level <- "Phylum"
}
ps_ra <- phyloseq::transform_sample_counts(ps, function(x){x/sum(x)})
physeq = ps_ra
x = "Sample"
y = "Abundance"
fill = "Phylum"
color_sample_names = TRUE
col_vec = phylum_colors
facet_grid = NULL
if(taxa_are_rows(physeq)) { physeq <- t(physeq) }
if(! group_var %in% colnames(sample_data(physeq))) {
stop("The given group_var is not a variable in the sample data of the phyloseq object.")
}
if (!all(names(color_levels) %in% unique(sample_data(physeq)[[group_var]]))) {
stop("Not all names in names(color_levels)are actually levels in the group_var column.")
}
physeq
# in case you do not want to see all samples
if (!all(unique(sample_data(physeq)[[group_var]]) %in% names(color_levels))) {
keepSamples <- sample_names(physeq)[sample_data(physeq)[[group_var]] %in% names(color_levels)]
physeq <- prune_samples(samples = keepSamples, physeq)
}
sample_data(physeq)[[group_var]] <- factor(sample_data(physeq)[[group_var]], levels = names(color_levels), order = TRUE)
physeq
if (is.null(fill)) { fill = "Phylum"}
mdf <- phyloseq::psmelt(physeq)
View(mdf)
mdf1 <- mdf1
mdf1 <- mdf
# order samples according to levels
LookUpDF <- data.frame(Sample = sample_names(physeq), Group = sample_data(physeq)[[group_var]])
dim(LookUpDF)
View(LookUpDF)
levels(LookUpDF$Group)
mdf[, fill]
View(mdf1)
mdf1$Country
?arrange
mdf2 <- arrange(mdf1, Country)
View(mdf2)
mdf_frimicutes <- dplyr::filter(mdf, Phylum == "Firmicutes")
mdf_frimicutes <- dplyr::filter(mdf, Phylum == "Firmicutes") %>% arrange_(group_var, "Abundance")
View(mdf_frimicutes)
mdf$Sample <- factor(mdf$Sample, levels = mdf_firmicutes$Sample, ordered = TRUE)
mdf_frimicutes <- dplyr::filter(mdf, Phylum == "Firmicutes") %>% arrange_(group_var, "Abundance")
mdf$Sample <- factor(mdf$Sample, levels = mdf_firmicutes$Sample, ordered = TRUE)
mdf_firmicutes <- dplyr::filter(mdf, Phylum == "Firmicutes") %>% arrange_(group_var, "Abundance")
mdf$Sample <- factor(mdf$Sample, levels = mdf_firmicutes$Sample, ordered = TRUE)
plot_sample_bars <- function(physeq, x = "Sample", y = "Abundance", group_var, color_levels, fill = NULL,
color_sample_names = TRUE, col_vec = NULL, facet_grid = NULL, order_samples_by_Firmicutes = TRUE){
if(taxa_are_rows(physeq)) { physeq <- t(physeq) }
if(! group_var %in% colnames(sample_data(physeq))) {
stop("The given group_var is not a variable in the sample data of the phyloseq object.")
}
if (!all(names(color_levels) %in% unique(sample_data(physeq)[[group_var]]))) {
stop("Not all names in names(color_levels)are actually levels in the group_var column.")
}
# in case you do not want to see all samples
if (!all(unique(sample_data(physeq)[[group_var]]) %in% names(color_levels))) {
keepSamples <- sample_names(physeq)[sample_data(physeq)[[group_var]] %in% names(color_levels)]
physeq <- prune_samples(samples = keepSamples, physeq)
}
sample_data(physeq)[[group_var]] <- factor(sample_data(physeq)[[group_var]], levels = names(color_levels), order = TRUE)
# if (!is.factor(sample_data(physeq)[[group_var]])) {sample_data(physeq)[[group_var]] <- as.factor(sample_data(physeq)[[group_var]])}
if (is.null(fill)) { fill = "Phylum"}
mdf <- phyloseq::psmelt(physeq)
# order samples according to levels
LookUpDF <- data.frame(Sample = sample_names(physeq), Group = sample_data(physeq)[[group_var]])
LookUpDF <- LookUpDF[order(match(LookUpDF$Group, levels(LookUpDF$Group))), ]
if (order_samples_by_Firmicutes) {
mdf_firmicutes <- dplyr::filter(mdf, Phylum == "Firmicutes") %>% arrange_(group_var, "Abundance")
mdf$Sample <- factor(mdf$Sample, levels = mdf_firmicutes$Sample, ordered = TRUE)
} else {
mdf$Sample <- factor(mdf$Sample, levels = LookUpDF$Sample, ordered = TRUE)
}
# order fill levels according to abundance over all samples
mdf[, fill] <- as.character(mdf[, fill])
mdf[is.na(mdf[, fill]), fill] <- "NA"
sums <- group_by_(mdf, fill) %>% summarise(sum_abundance = sum(Abundance)) %>% arrange(sum_abundance)
mdf[, fill] <- factor(mdf[, fill], levels = as.character(sums[[1]]), ordered = TRUE)
# - define names of x axis using color_levels (which must be a named character vector) -
colxaxis <- color_levels[LookUpDF$Group]
# --
if (is.null(col_vec)){
if (length(levels(mdf[, fill])) <= 15) {
fill_colors <- make_color_vector(mdf[, fill], rev(QuantColors15[1:length(levels(mdf[, fill]))]))
} else {
fill_colors <- make_color_vector(mdf[, fill], viridis(length(levels(mdf[, fill]))))
}
} else {
fill_colors <- col_vec
}
# # - sort samples again based on Firmicutes -
# FirmSummary <- filter(mdf, Phylum == "Firmicutes") %>% arrange(Abundance)
# mdf$Sample <- factor(mdf$Sample, levels = FirmSummary$Sample, ordered = TRUE)
# # --
Tr <- ggplot(mdf, aes_string(x = x, y = y, fill = fill))
Tr <- Tr +
geom_bar(stat = "identity", position = "stack") +
theme_bw() +
scale_fill_manual(values = fill_colors) +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0, colour = colxaxis))
if (!is.null(facet_grid)) {
formulation <- as.formula(paste("~ ", facet_grid, sep = ""))
Tr <- Tr + facet_grid(formulation)
}
Tr
}
bar_plot_ps_ra <- plot_sample_bars(physeq = ps_ra, x = "Sample", y = "Abundance", group_var = group_var, color_levels = color_levels, fill = "Phylum", color_sample_names = TRUE, col_vec = phylum_colors, facet_grid = NULL, order_samples_by_Firmicutes = TRUE)
bar_plot_ps_ra
# - generate barplot representations of counts before and after total count adjustment -
# I noticed that the following function is much faster when first doing taxglom, so I believe these tax_gloms can sepped up the run but are of course not necessary
psP <- phyloseq::tax_glom(ps, taxrank = "Phylum", NArm = FALSE)
ps_tcaP <- phyloseq::tax_glom(ps_tca, taxrank = "Phylum", NArm = FALSE)
physeq = psP
physeq2 = ps_tcaP
x = "Sample"
y = "Abundance"
color_sample_names = TRUE
col_vec = phylum_colors
# - prepare mdf of ps physeq -
if(taxa_are_rows(physeq)) { physeq <- t(physeq) }
# in case you do not want to see all samples
if (!all(unique(sample_data(physeq)[[group_var]]) %in% names(color_levels))) {
keepSamples <- sample_names(physeq)[sample_data(physeq)[[group_var]] %in% names(color_levels)]
physeq <- prune_samples(samples = keepSamples, physeq)
}
sample_data(physeq)[[group_var]] <- factor(sample_data(physeq)[[group_var]], levels = names(color_levels), order = TRUE)
# if (!is.factor(sample_data(physeq)[[group_var]])) {sample_data(physeq)[[group_var]] <- factor(sample_data(physeq)[[group_var]], levels = names(color_levels), order = TRUE)}
if (is.null(fill)) { fill = "Phylum"}
mdf <- phyloseq::psmelt(physeq)
# order samples according to levels
LookUpDF <- data.frame(Sample = sample_names(physeq), Group = sample_data(physeq)[[group_var]])
LookUpDF <- LookUpDF[order(match(LookUpDF$Group, levels(LookUpDF$Group))), ]
sample_sums(physeq1)
sample_sums(physeq)
rawSampleSizes <- data.frame(sample_data(physeq)[[group_var]], Total = sample_sums(physeq))
View(rawSampleSizes)
rawSampleSizes <- data.frame(sample_data(physeq)[[group_var]], sample_sums(physeq))
View(rawSampleSizes)
rawSampleSizes <- data.frame(group_var = sample_data(physeq)[[group_var]], "Total" = sample_sums(physeq))
View(rawSampleSizes)
rawSampleSizes <- data.frame(get(group_var) = sample_data(physeq)[[group_var]], "Total" = sample_sums(physeq))
rawSampleSizes <- data.frame("Group" = sample_data(physeq)[[group_var]], "Total" = sample_sums(physeq))
View(rawSampleSizes)
rawSampleSizes <- arrange(rawSampleSizes, Group, Total)
View(rawSampleSizes)
sample.names(physeq)
rawSampleSizes <- data.frame("Sample" = sample_names(physeq), "Group" = sample_data(physeq)[[group_var]], "Total" = sample_sums(physeq))
rawSampleSizes <- dplyr::arrange(rawSampleSizes, Group, Total)
mdf$Sample <- factor(mdf$Sample, levels = rawSampleSizes$Sample, ordered = TRUE)
plot_sample_bars_compare <- function(physeq, physeq2, x = "Sample", y = "Abundance", group_var, color_levels, fill = NULL,
color_sample_names = TRUE, col_vec = NULL, order_samples_by_raw_counts = TRUE){
# - prepare mdf of ps physeq -
if(taxa_are_rows(physeq)) { physeq <- t(physeq) }
# in case you do not want to see all samples
if (!all(unique(sample_data(physeq)[[group_var]]) %in% names(color_levels))) {
keepSamples <- sample_names(physeq)[sample_data(physeq)[[group_var]] %in% names(color_levels)]
physeq <- prune_samples(samples = keepSamples, physeq)
}
sample_data(physeq)[[group_var]] <- factor(sample_data(physeq)[[group_var]], levels = names(color_levels), order = TRUE)
# if (!is.factor(sample_data(physeq)[[group_var]])) {sample_data(physeq)[[group_var]] <- factor(sample_data(physeq)[[group_var]], levels = names(color_levels), order = TRUE)}
if (is.null(fill)) { fill = "Phylum"}
mdf <- phyloseq::psmelt(physeq)
# order fill levels according to abundance over all samples
mdf[, fill] <- as.character(mdf[, fill])
mdf[is.na(mdf[, fill]), fill] <- "NA"
sums <- group_by_(mdf, fill) %>% summarise(sum_abundance = sum(Abundance)) %>% arrange(sum_abundance)
mdf[, fill] <- factor(mdf[, fill], levels = as.character(sums[[1]]), ordered = TRUE)
# --
# - prepare mdf of ps_tca physeq -
if(taxa_are_rows(physeq2)) { physeq2 <- t(physeq2) }
if (!all(unique(sample_data(physeq2)[[group_var]]) %in% names(color_levels))) {
keepSamples <- sample_names(physeq2)[sample_data(physeq2)[[group_var]] %in% names(color_levels)]
physeq2 <- prune_samples(samples = keepSamples, physeq2)
sample_data(physeq2)[[group_var]] <- factor(sample_data(physeq2)[[group_var]], levels = names(color_levels), order = TRUE)
}
if (!is.factor(sample_data(physeq2)[[group_var]])) {sample_data(physeq2)[[group_var]] <- factor(sample_data(physeq2)[[group_var]], levels = names(color_levels), order = TRUE)}
if (is.null(fill)) { fill = "Phylum"}
mdf2 <- phyloseq::psmelt(physeq2)
# # order samples according to levels
# LookUpDF <- data.frame(Sample = sample_names(physeq2), Group = sample_data(physeq2)[[group_var]])
# LookUpDF <- LookUpDF[order(match(LookUpDF$Group, levels(LookUpDF$Group))), ]
# mdf2$Sample <- factor(mdf2$Sample, levels = LookUpDF$Sample, ordered = TRUE)
# # mdf2$Sample <- factor(mdf2$Sample, levels = c("A-15A", "A-5A", "A-2A", "A-1A", "B-15A", "B-5A", "B-2A", "B-1A"), ordered = TRUE)
# order fill levels according to abundance over all samples
mdf2[, fill] <- as.character(mdf2[, fill])
mdf2[is.na(mdf2[, fill]), fill] <- "NA"
sums <- group_by_(mdf2, fill) %>% summarise(sum_abundance = sum(Abundance)) %>% arrange(sum_abundance)
mdf2[, fill] <- factor(mdf2[, fill], levels = as.character(sums[[1]]), ordered = TRUE)
# --
mdf$Typer <- "before"
mdf2$Typer <- "after SF adjustment"
mdf <- rbind(mdf, mdf2)
mdf$Typer <- factor(mdf$Typer, levels = c("before", "after SF adjustment"), ordered = TRUE)
# - order samples according to levels -
LookUpDF <- data.frame(Sample = sample_names(physeq), Group = sample_data(physeq)[[group_var]])
LookUpDF <- LookUpDF[order(match(LookUpDF$Group, levels(LookUpDF$Group))), ]
if (order_samples_by_raw_counts) {
rawSampleSizes <- data.frame("Sample" = sample_names(physeq), "Group" = sample_data(physeq)[[group_var]], "Total" = sample_sums(physeq))
rawSampleSizes <- dplyr::arrange(rawSampleSizes, Group, Total)
mdf$Sample <- factor(mdf$Sample, levels = rawSampleSizes$Sample, ordered = TRUE)
} else {
mdf$Sample <- factor(mdf$Sample, levels = LookUpDF$Sample, ordered = TRUE)
}
# --
# - define names of x axis using color_levels (which must be a named character vector) -
colxaxis <- color_levels[LookUpDF$Group]
# --
if (is.null(col_vec)){
if (length(levels(mdf[, fill])) <= 15) {
fill_colors <- make_color_vector(mdf[, fill], rev(QuantColors15[1:length(levels(mdf[, fill]))]))
} else {
fill_colors <- make_color_vector(mdf[, fill], viridis(length(levels(mdf[, fill]))))
}
} else {
fill_colors <- col_vec
}
Tr <- ggplot(mdf, aes_string(x = x, y = y, fill = fill))
Tr <- Tr +
geom_bar(stat = "identity", position = "stack") +
theme_bw() +
scale_fill_manual(values = fill_colors) +
xlab("") +
facet_wrap(~ Typer, ncol = 1) +
theme(axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0, colour = colxaxis))
Tr
}
bar_plot_ps_vs_ps_tca <- plot_sample_bars_compare(physeq = psP, physeq2 = ps_tcaP, x = "Sample", y = "Abundance", group_var = group_var, color_levels = color_levels, color_sample_names = TRUE, fill = "Phylum", col_vec = phylum_colors, order_samples_by_raw_counts = TRUE)
bar_plot_ps_vs_ps_tca
bar_plot_ps_vs_ps_tca -> barP1
bar_plot_ps_vs_ps_tca <- plot_sample_bars_compare(physeq = psP, physeq2 = ps_tcaP, x = "Sample", y = "Abundance", group_var = group_var, color_levels = color_levels, color_sample_names = TRUE, fill = "Phylum", col_vec = phylum_colors, order_samples_by_raw_counts = FALSE)
bar_plot_ps_vs_ps_tca
